//
// Copyright 2012 Jeff Verkoeyen
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "MarkdownTokens.h"

#line 3 "lex.markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE markdownrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via markdownrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void markdownrestart (FILE *input_file ,yyscan_t yyscanner );
void markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void markdown_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdown_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void markdownpop_buffer_state (yyscan_t yyscanner );

static void markdownensure_buffer_stack (yyscan_t yyscanner );
static void markdown_load_buffer_state (yyscan_t yyscanner );
static void markdown_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER markdown_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE markdown_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *markdownalloc (yy_size_t ,yyscan_t yyscanner );
void *markdownrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void markdownfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 13
#define YY_END_OF_BUFFER 14
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[303] =
    {   0,
        0,    0,   14,   12,   11,   11,   11,   12,   12,   12,
       12,   12,   12,   12,    4,   12,    0,    0,   10,    0,
        0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    1,    4,    4,    8,    0,    0,   10,
        9,    0,    1,    0,    1,    0,    0,    0,    0,    0,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,    5,    5,    0,    0,    0,
        0,    0,    0,    2,    6,    0,    6,    6,    0,    6,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    5,    0,    0,    0,    0,    0,    0,    2,

        4,    2,    2,    5,    0,    0,    0,    0,    0,    6,
        0,    6,    6,    6,    0,    6,    6,    6,    6,    0,
        0,    0,    0,    0,    6,    0,    0,    0,    0,    5,
        0,    0,    0,    0,    0,    4,    0,    5,    3,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        0,    6,    6,    0,    0,    0,    7,    6,    6,    0,
        0,    5,    0,    4,    3,    6,    6,    6,    6,    0,
        6,    6,    6,    6,    6,    0,    6,    6,    6,    6,
        6,    0,    6,    6,    6,    6,    0,    0,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        0,    6,    6,    6,    6,    6,    6,    0,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    0,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    0,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    6,    7,    6,    6,    6,    6,    8,
        9,   10,    6,    6,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    6,    6,
       16,    6,    6,    6,   14,   14,   14,   14,   14,   17,
       18,   19,   18,   18,   18,   18,   18,   18,   18,   20,
       18,   18,   21,   22,   18,   18,   18,   18,   18,   18,
       23,   24,   25,    6,   26,    6,   14,   14,   14,   14,

       14,   27,   18,   28,   18,   18,   18,   18,   18,   18,
       18,   29,   18,   18,   30,   31,   18,   18,   18,   18,
       18,   18,    6,    6,    6,    6,    1,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32
    } ;

static yyconst flex_int32_t yy_meta[33] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        3,    4,    5,    3,    2,    6,    3,    3,    3,    3,
        3,    3,    2,    3,    2,    2,    3,    3,    3,    3,
        3,    3
    } ;

static yyconst flex_int16_t yy_base[345] =
    {   0,
        0,   26,  594,  587,  573,  568,   31,   32,   42,   53,
       54,  561,   85,   74,   75,   85,  556,   81,  550,   35,
       88,   93,   91,  535,  102,  134,   98,  127,   80,    0,
      160,  114,  130,  140,  542,  104,  537,  142,  139,  524,
      141,   36,  521,  502, 1564,  157,  105,  159,  168,  177,
      199,  231,  499,  257,  225,  160,  178,  227,  165,  460,
      238,  199,  174,  221,  208, 1564,  475,  173,  466,  458,
      262,  247,  265,  253,  274,  306,  447,  323,  355,    0,
      381,  300,  253,  239,  113,  306,  211,  449,  410,  266,
      273,  305,  404,  263,  401,  362,  370,  312,  350,  322,

      276,  389, 1564,  369,  325,  367,  354,  364,  336,    0,
      408,    0,  434,    0,  461,  351,  487,  504,  354,  338,
      373,  357,  388,  390,  390,  390,  315,  527,  402,  323,
      398,  304,  415,  303,  402,  310,  304,  289,  294,    0,
      553,  429,  406,    0,  579,  438,  429,  455,   82,  256,
      430,  455,  457,  460,  466,  606,  493,    0,  637,  480,
      481,  227,  218,  219, 1564,  510,  486,  190,  378,  492,
      508,  526,  519,  534,  408,  535,  172,  663,  546,  444,
      689,  551,  706,  728,  760,  552,  558,  560,  572,  468,
      786,  574,  156,  578,  629,  494,  812,  630,  631,  635,

      636,  133,  829,  861,    0,  887,  655,  656,  657,  662,
      671,  682,  687,  694,  705,  727,  752,  904,  926,  958,
      132,  984,  753,  754,  758,  759,  778,  779,  780,  784,
      785,  804,  805, 1001, 1033,   81, 1050, 1082,    0, 1108,
      810,  827,  828, 1134,  853,  854,  855,  859,  860,  879,
        0, 1150,    0, 1176,    0, 1203,   69, 1229,  880,  881,
      885,  831,  886,  902,  903, 1255,    0, 1270,  924,    0,
     1296,  950,  951,  952,  956,  957, 1322,  976,  977,  978,
      983, 1000, 1025, 1026, 1027, 1031, 1032, 1048, 1049, 1074,
     1075, 1076, 1080, 1081, 1100, 1101, 1102, 1106, 1107, 1129,

     1130, 1564, 1338, 1344, 1350, 1356, 1362, 1368, 1374, 1380,
     1386, 1392, 1398, 1404, 1410, 1416, 1420, 1426, 1432, 1438,
     1444, 1450, 1456,   77, 1461, 1467, 1473, 1479, 1483,   76,
     1488, 1492, 1496, 1500, 1505, 1510, 1515, 1521, 1527, 1533,
     1539, 1545, 1551, 1557
    } ;

static yyconst flex_int16_t yy_def[345] =
    {   0,
      302,    1,  302,  303,  303,  302,  303,  304,  302,    9,
        9,  305,  306,  307,  308,    9,  303,  302,  302,  303,
      304,  309,  310,    9,    9,  311,    9,    9,  305,    9,
        9,  307,  312,  313,  308,  308,  303,    9,  302,  302,
      302,  303,  303,  309,  302,  309,  310,  314,  315,   25,
        9,  316,    9,    9,    9,    9,  305,  317,   31,  312,
      312,  313,  318,  319,  308,  302,  309,  303,  314,  302,
      314,  315,  320,  303,   51,  321,   51,   75,  322,   51,
       51,  317,   54,  303,    9,    9,  323,   82,  324,   82,
      325,   31,  312,  303,  318,  318,  302,  319,  326,  303,

      308,  303,  302,  314,  303,  320,  302,  320,  303,   75,
      327,   75,   75,   78,  328,   51,   51,  329,   81,  330,
       54,  303,  323,  323,  329,  331,   82,   82,   31,  318,
      303,  326,  326,  302,  303,  308,  302,  320,  303,   75,
       75,  332,  113,   78,   78,  125,  117,  125,  333,  125,
      334,   81,  332,  335,   54,  302,  323,  125,  125,  128,
       31,  326,  302,  308,  302,  332,  141,  166,  166,  336,
      113,  333,  145,  117,  333,  337,  125,  125,   81,  166,
      166,   54,  156,  156,  338,  159,  128,   31,  141,  166,
      181,  113,  172,  145,  117,  172,  172,  178,   81,  181,

       54,  184,  156,  339,  184,  184,  159,  128,  141,  191,
      113,  145,  117,  197,  178,   81,  181,  156,  184,  340,
      184,  184,  206,  159,  128,  141,  191,  113,  145,  117,
      197,  178,  181,  219,  341,  219,  234,  342,  219,  219,
      222,  206,  159,   82,  141,  191,  145,  197,  178,  181,
      234,  343,  234,  234,  237,  344,  219,  219,  240,  222,
      206,  125,  191,  197,  178,  166,  234,  234,  254,  237,
      237,  258,  240,  222,  206,  191,  172,  268,  254,  271,
      258,  240,  222,  206,  268,  254,  271,  258,  240,  222,
      268,  254,  271,  258,  240,  268,  254,  271,  258,  268,

      271,    0,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302
    } ;

static yyconst flex_int16_t yy_nxt[1597] =
    {   0,
        4,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        9,    4,    4,    9,    4,    4,   10,    9,   11,    9,
        9,    9,   12,   13,    4,   14,   10,   11,    9,    9,
        9,    9,   15,   18,   22,   20,   16,   41,   41,   42,
       42,   23,   17,   17,   18,   17,   17,   17,   17,   17,
       17,   17,   24,   25,   17,   24,   17,   17,   24,   24,
       24,   24,   24,   24,   17,   26,   17,   17,   24,   24,
       24,   24,   24,   24,   27,   28,   33,   18,  153,  125,
      218,   36,   18,   27,   28,   17,   17,   18,   17,   37,
       22,   39,  218,   48,  149,   38,   39,   43,   31,   34,

       49,   31,   45,   46,   57,  176,   18,   48,   46,   50,
       65,   31,   51,   17,   68,   51,   33,   55,   51,   51,
       51,   51,   51,   51,   50,   52,   55,   84,   51,   51,
       51,   51,   51,   51,   17,   17,   18,   17,   50,   43,
       61,   66,   63,  218,  218,   61,   37,   54,   56,   39,
       54,   39,   38,   50,   39,   45,   39,   56,   66,   67,
       54,   30,   58,   30,   30,   64,   45,   46,   70,   71,
       73,   50,   46,   59,   71,   18,   59,   74,   92,   86,
       18,   92,  102,  120,   96,   87,   59,   75,   86,   96,
       75,   92,   66,   75,   75,   75,   75,   75,   75,   97,

       76,   63,   57,   75,   75,   75,   75,   75,   75,   77,
       18,   78,   77,   18,  101,   77,   77,   77,   77,   77,
       77,   18,   79,   99,   94,   77,   77,   77,   77,   77,
       77,   17,   17,   18,   17,  124,   50,   88,   89,   84,
       93,   18,   39,  165,   81,   85,  100,   81,   61,   73,
       91,  122,  134,   61,   85,   18,  105,   81,   53,   82,
       53,   53,  109,   45,  104,   18,  121,  120,   50,  121,
       83,   70,   71,   83,  107,  108,   90,   71,   18,  121,
      108,  302,  136,   83,  110,   17,  128,  110,  102,  128,
      110,  110,  110,  110,  110,  110,   18,  111,  107,  128,

      110,  110,  110,  110,  110,  110,   17,   17,   18,   17,
       88,  120,   18,  165,   99,   39,  164,   50,  129,  113,
       84,  129,  113,   91,   18,   90,   85,   18,  163,  134,
      302,  129,  113,  114,  109,   85,  114,  131,   18,  114,
      114,  114,  114,  114,  114,  139,  115,  135,   97,  114,
      114,  114,  114,  114,  114,   17,   17,   18,   17,   18,
      133,  154,   50,  137,  130,  133,  138,  152,  117,  156,
      152,  117,   96,  107,  108,  134,  107,   96,   70,  108,
      152,  117,   80,  118,   80,   80,  155,   97,  169,  155,
       18,   18,   18,  302,  119,  103,  157,  119,  157,  155,

       18,   89,  149,  159,   18,  302,  159,  119,   17,   17,
       18,   17,  124,  151,  124,  161,  159,  162,  161,  171,
      149,  141,  171,  135,  141,  133,   97,  139,  161,   45,
      133,  176,  171,  126,  141,  112,  142,  112,  112,  168,
      134,  149,  174,  178,   39,  174,  178,  143,  148,  120,
      143,   66,  170,   39,  169,  174,  178,   66,   50,  302,
      143,   17,   17,   18,   17,  148,  120,  103,  179,  149,
       39,  179,  302,  181,  145,   70,  181,  145,  169,  182,
      170,  179,  182,  302,   45,   45,  181,  145,  116,  146,
      116,  116,  182,  187,  188,   18,  187,  188,   50,  189,

      147,  157,  189,  147,  175,  191,  187,  188,  191,  302,
       50,   45,  189,  147,  148,   89,  149,  124,  191,   39,
      168,  192,  149,   18,  192,   39,   40,  151,  127,  127,
      127,  127,  194,  170,  192,  194,  193,   90,  149,   18,
      160,   39,  302,  160,   18,  194,   50,  195,  197,  176,
      195,  197,   40,  160,  140,  166,  140,  140,   18,  199,
      195,  197,  199,   18,  201,  207,  167,  201,  207,  167,
       19,  208,  199,   24,  208,   18,   24,  201,  207,  167,
      144,  172,  144,  144,  208,  209,   24,  211,  209,   18,
      211,  212,  173,  302,  212,  173,  302,  302,  209,  302,

      211,  302,  302,  302,  212,  173,  183,  183,   18,  183,
       17,  183,  183,  183,  183,  183,  184,  183,  183,  184,
      183,  183,  184,  184,  184,  184,  184,  184,  183,  185,
      183,  183,  184,  184,  184,  184,  184,  184,  158,  158,
      158,  158,  213,  215,  216,  213,  215,  216,  217,   24,
      186,  217,   24,  186,  302,  213,  215,  216,  302,  302,
      302,  217,   24,  186,  177,  177,  177,  177,  224,  225,
      226,  224,  225,  226,  120,  227,  198,  302,  227,  198,
      302,  224,  225,  226,  228,  302,  302,  228,  227,  198,
      180,  180,  180,  180,  302,  229,  302,  228,  229,  169,

      230,  302,  200,  230,  302,  200,  302,  231,  229,  302,
      231,  302,  302,  230,  302,  200,  183,  302,  232,  183,
      231,  232,  183,  183,  183,  183,  183,  183,  302,  183,
      302,  232,  183,  183,  183,  183,  183,  183,  202,  203,
       77,  202,  302,   77,  202,  202,  202,  202,  202,  202,
      302,  204,  302,   77,  202,  202,  202,  202,  202,  202,
      183,  183,   18,  183,   30,  233,  242,  243,  233,  242,
      243,  244,  245,  206,  244,  245,  206,  302,  233,  242,
      243,  302,  302,  302,  244,  245,  206,  190,  190,  190,
      190,  246,  110,  247,  246,  110,  247,   77,  248,  210,

       77,  248,  210,  302,  246,  110,  247,  302,  302,  302,
       77,  248,  210,  196,  196,  196,  196,  249,  250,  302,
      249,  250,  175,  260,  302,  214,  260,  302,  214,  302,
      249,  250,  158,  158,  158,  158,  260,  302,  214,  219,
      261,  262,  219,  261,  262,  219,  219,  219,  219,  219,
      219,  302,  220,  261,  262,  219,  219,  219,  219,  219,
      219,  183,  183,   18,  183,   53,  110,  263,  114,  110,
      263,  114,  264,  265,  222,  264,  265,  222,  302,  110,
      263,  114,  302,  302,  302,  264,  265,  222,  205,   58,
      205,   30,  266,  273,  274,  266,  273,  274,  275,  276,

      223,  275,  276,  223,  302,  266,  273,  274,  302,  302,
      302,  275,  276,  223,  234,  277,  150,  234,  277,  150,
      234,  234,  234,  234,  234,  234,  302,  235,  277,  150,
      234,  234,  234,  234,  234,  234,  236,  279,  237,  236,
      279,  302,  236,  236,  236,  236,  236,  236,  302,  238,
      279,  302,  236,  236,  236,  236,  236,  236,  183,  183,
       18,  183,   80,  281,  282,  283,  281,  282,  283,  284,
      169,  240,  284,  169,  240,  302,  281,  282,  283,  302,
      302,  302,  284,  169,  240,  221,   82,  221,   53,  285,
      286,  287,  285,  286,  287,  218,  288,  241,  302,  288,

      241,  302,  285,  286,  287,  302,  302,  302,  302,  288,
      241,  251,  183,  289,  251,  302,  289,  251,  251,  251,
      251,  251,  251,  302,  252,  302,  289,  251,  251,  251,
      251,  251,  251,  183,  183,   18,  183,  112,  290,  202,
      291,  290,  202,  291,  292,  293,  254,  292,  293,  254,
      302,  290,  202,  291,  302,  302,  302,  292,  293,  254,
      255,  294,  295,  255,  294,  295,  255,  255,  255,  255,
      255,  255,  302,  256,  294,  295,  255,  255,  255,  255,
      255,  255,  183,  183,   18,  183,  116,  202,  296,  297,
      202,  296,  297,  298,  299,  258,  298,  299,  258,  302,

      202,  296,  297,  302,  302,  302,  298,  299,  258,  239,
      118,  239,   80,  236,  300,  251,  236,  300,  251,  301,
      236,  259,  301,  236,  259,  302,  236,  300,  251,  302,
      302,  302,  301,  236,  259,  127,  127,  127,  127,  302,
      302,  302,  251,  255,   90,  251,  255,  302,  302,  302,
      183,  183,   18,  183,  140,  251,  255,  302,  302,  302,
      302,  302,  302,  268,  302,  302,  268,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  268,  253,  142,  253,
      112,  302,  302,  302,  302,  302,  302,  302,  302,  269,
      302,  302,  269,  302,  302,  302,  302,  302,  302,  302,

      302,  302,  269,  183,  183,   18,  183,  144,  302,  302,
      302,  302,  302,  302,  302,  302,  271,  302,  302,  271,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  271,
      257,  146,  257,  116,  302,  302,  302,  302,  302,  302,
      218,  302,  272,  302,  302,  272,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  272,  180,  180,  180,  180,
      302,  302,  302,  302,  302,  169,  302,  302,  302,  302,
      302,  267,  166,  267,  140,  302,  302,  302,  302,  302,
      302,  302,  302,  278,  302,  302,  278,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  278,  270,  172,  270,

      144,  302,  302,  302,  302,  302,  302,  302,  302,  280,
      302,  302,  280,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  280,  196,  196,  196,  196,  302,  302,  302,
      302,  302,  175,  302,  302,  302,  302,  302,   17,   17,
       17,   17,   17,   17,   21,   21,   21,   21,   21,   21,
       29,   29,   29,   29,   29,   29,   30,   30,   30,   30,
       30,   30,   32,   32,   32,   32,   32,   32,   35,   35,
       35,   35,   35,   35,   44,   44,   44,   44,   44,   44,
       47,   47,   47,   47,   47,   47,   53,   53,   53,   53,
       53,   53,   60,   60,   60,   60,   60,   60,   62,   62,

       62,   62,   62,   62,   69,   69,   69,   69,   69,   69,
       72,   72,   72,   72,   72,   72,   80,   80,   80,   80,
       80,   80,   90,   90,  302,   90,   95,   95,   95,   95,
       95,   95,   98,   98,   98,   98,   98,   98,  106,  106,
      106,  106,  106,  106,  112,  112,  112,  112,  112,  112,
      116,  116,  116,  116,  116,  116,  123,  123,  123,  123,
      123,  123,  127,  127,  127,  127,  127,  132,  132,  132,
      132,  132,  132,  140,  140,  140,  140,  140,  140,  144,
      144,  144,  144,  144,  144,  150,  150,  150,  150,  158,
      158,  158,  158,  158,  169,  302,  169,  169,  175,  302,

      175,  177,  177,  177,  177,  177,  180,  180,  180,  180,
      180,  190,  190,  190,  190,  190,  196,  196,  196,  196,
      196,  205,  205,  205,  205,  205,  205,  221,  221,  221,
      221,  221,  221,  239,  239,  239,  239,  239,  239,  253,
      253,  253,  253,  253,  253,  257,  257,  257,  257,  257,
      257,  267,  267,  267,  267,  267,  267,  270,  270,  270,
      270,  270,  270,    3,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302

    } ;

static yyconst flex_int16_t yy_chk[1597] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    7,    8,    7,    2,   20,   42,   20,
       42,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   10,   11,   14,   15,  330,  324,
      257,   15,   29,   10,   11,   13,   13,   13,   13,   16,
       21,   18,  236,   23,  149,   16,   18,   21,   13,   14,

       23,   13,   22,   22,   29,  149,   36,   47,   22,   27,
       36,   13,   25,   25,   47,   25,   32,   27,   25,   25,
       25,   25,   25,   25,   85,   25,   27,   85,   25,   25,
       25,   25,   25,   25,   26,   26,   26,   26,   28,   32,
       33,   39,   34,  221,  202,   33,   38,   26,   28,   39,
       26,   41,   38,   38,   39,   33,   41,   28,  193,   46,
       26,   31,   31,   31,   31,   34,   46,   46,   48,   48,
       49,   56,   46,   31,   48,   68,   31,   49,   59,   56,
       57,   59,   68,  177,   63,   57,   31,   50,   56,   63,
       50,   59,  168,   50,   50,   50,   50,   50,   50,   63,

       50,   62,   57,   50,   50,   50,   50,   50,   50,   51,
       65,   51,   51,   87,   65,   51,   51,   51,   51,   51,
       51,  164,   51,   64,   62,   51,   51,   51,   51,   51,
       51,   52,   52,   52,   52,   87,   55,   58,   58,   55,
       61,   84,   58,  163,   52,   55,   64,   52,   61,   72,
       58,   84,  162,   61,   55,   74,   72,   52,   54,   54,
       54,   54,   74,   61,   71,   94,   83,  150,   54,   83,
       54,   71,   71,   54,   73,   73,   90,   71,  101,   83,
       73,   90,  101,   54,   75,   75,   91,   75,   94,   91,
       75,   75,   75,   75,   75,   75,  139,   75,  138,   91,

       75,   75,   75,   75,   75,   75,   76,   76,   76,   76,
       82,   82,  136,  137,   98,   82,  136,   86,   92,   76,
       86,   92,   76,   82,  100,  127,   86,  105,  134,  132,
      127,   92,   76,   78,  105,   86,   78,   98,  109,   78,
       78,   78,   78,   78,   78,  109,   78,  100,  130,   78,
       78,   78,   78,   78,   78,   79,   79,   79,   79,  122,
       99,  120,  116,  107,   96,   99,  108,  119,   79,  122,
      119,   79,   96,  108,  108,   99,  106,   96,  104,  108,
      119,   79,   81,   81,   81,   81,  121,   96,  169,  121,
      123,  102,  124,  169,   81,   97,  123,   81,  124,  121,

      131,  125,  125,  126,  135,  125,  126,   81,  111,  111,
      111,  111,  123,  125,  124,  129,  126,  133,  129,  143,
      175,  111,  143,  131,  111,  133,   95,  135,  129,   93,
      133,  175,  143,   89,  111,  113,  113,  113,  113,  142,
      133,  142,  147,  151,  142,  147,  151,  113,  146,  146,
      113,   88,  142,  146,  180,  147,  151,  148,   77,  180,
      113,  115,  115,  115,  115,  148,  148,   70,  152,  153,
      148,  152,  153,  154,  115,   69,  154,  115,  190,  155,
      153,  152,  155,  190,   67,   60,  154,  115,  117,  117,
      117,  117,  155,  160,  161,  157,  160,  161,  117,  167,

      117,  157,  167,  117,  196,  170,  160,  161,  170,  196,
       53,   44,  167,  117,  118,  118,  118,  157,  170,  118,
      166,  171,  166,   43,  171,  166,   40,  118,  128,  128,
      128,  128,  173,  166,  171,  173,  172,  128,  172,   37,
      128,  172,  128,  128,   35,  173,   24,  174,  176,  172,
      174,  176,   19,  128,  141,  141,  141,  141,   17,  179,
      174,  176,  179,   12,  182,  186,  141,  182,  186,  141,
        6,  187,  179,  188,  187,    5,  188,  182,  186,  141,
      145,  145,  145,  145,  187,  189,  188,  192,  189,    4,
      192,  194,  145,    3,  194,  145,    0,    0,  189,    0,

      192,    0,    0,    0,  194,  145,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  159,  159,
      159,  159,  195,  198,  199,  195,  198,  199,  200,  201,
      159,  200,  201,  159,    0,  195,  198,  199,    0,    0,
        0,  200,  201,  159,  178,  178,  178,  178,  207,  208,
      209,  207,  208,  209,  178,  210,  178,    0,  210,  178,
        0,  207,  208,  209,  211,    0,    0,  211,  210,  178,
      181,  181,  181,  181,    0,  212,    0,  211,  212,  181,

      213,    0,  181,  213,  181,  181,    0,  214,  212,    0,
      214,    0,    0,  213,    0,  181,  183,    0,  215,  183,
      214,  215,  183,  183,  183,  183,  183,  183,    0,  183,
        0,  215,  183,  183,  183,  183,  183,  183,  184,  184,
      216,  184,    0,  216,  184,  184,  184,  184,  184,  184,
        0,  184,    0,  216,  184,  184,  184,  184,  184,  184,
      185,  185,  185,  185,  185,  217,  223,  224,  217,  223,
      224,  225,  226,  185,  225,  226,  185,    0,  217,  223,
      224,    0,    0,    0,  225,  226,  185,  191,  191,  191,
      191,  227,  228,  229,  227,  228,  229,  230,  231,  191,

      230,  231,  191,    0,  227,  228,  229,    0,    0,    0,
      230,  231,  191,  197,  197,  197,  197,  232,  233,    0,
      232,  233,  197,  241,    0,  197,  241,  197,  197,    0,
      232,  233,  262,  262,  262,  262,  241,    0,  197,  203,
      242,  243,  203,  242,  243,  203,  203,  203,  203,  203,
      203,    0,  203,  242,  243,  203,  203,  203,  203,  203,
      203,  204,  204,  204,  204,  204,  245,  246,  247,  245,
      246,  247,  248,  249,  204,  248,  249,  204,    0,  245,
      246,  247,    0,    0,    0,  248,  249,  204,  206,  206,
      206,  206,  250,  259,  260,  250,  259,  260,  261,  263,

      206,  261,  263,  206,    0,  250,  259,  260,    0,    0,
        0,  261,  263,  206,  218,  264,  265,  218,  264,  265,
      218,  218,  218,  218,  218,  218,    0,  218,  264,  265,
      218,  218,  218,  218,  218,  218,  219,  269,  219,  219,
      269,    0,  219,  219,  219,  219,  219,  219,    0,  219,
      269,    0,  219,  219,  219,  219,  219,  219,  220,  220,
      220,  220,  220,  272,  273,  274,  272,  273,  274,  275,
      276,  220,  275,  276,  220,    0,  272,  273,  274,    0,
        0,    0,  275,  276,  220,  222,  222,  222,  222,  278,
      279,  280,  278,  279,  280,  222,  281,  222,    0,  281,

      222,    0,  278,  279,  280,    0,    0,    0,    0,  281,
      222,  234,  234,  282,  234,    0,  282,  234,  234,  234,
      234,  234,  234,    0,  234,    0,  282,  234,  234,  234,
      234,  234,  234,  235,  235,  235,  235,  235,  283,  284,
      285,  283,  284,  285,  286,  287,  235,  286,  287,  235,
        0,  283,  284,  285,    0,    0,    0,  286,  287,  235,
      237,  288,  289,  237,  288,  289,  237,  237,  237,  237,
      237,  237,    0,  237,  288,  289,  237,  237,  237,  237,
      237,  237,  238,  238,  238,  238,  238,  290,  291,  292,
      290,  291,  292,  293,  294,  238,  293,  294,  238,    0,

      290,  291,  292,    0,    0,    0,  293,  294,  238,  240,
      240,  240,  240,  295,  296,  297,  295,  296,  297,  298,
      299,  240,  298,  299,  240,    0,  295,  296,  297,    0,
        0,    0,  298,  299,  240,  244,  244,  244,  244,    0,
        0,    0,  300,  301,  244,  300,  301,    0,    0,  244,
      252,  252,  252,  252,  252,  300,  301,    0,    0,    0,
        0,    0,    0,  252,    0,    0,  252,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  252,  254,  254,  254,
      254,    0,    0,    0,    0,    0,    0,    0,    0,  254,
        0,    0,  254,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  254,  256,  256,  256,  256,  256,    0,    0,
        0,    0,    0,    0,    0,    0,  256,    0,    0,  256,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  256,
      258,  258,  258,  258,    0,    0,    0,    0,    0,    0,
      258,    0,  258,    0,    0,  258,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  258,  266,  266,  266,  266,
        0,    0,    0,    0,    0,  266,    0,    0,    0,    0,
      266,  268,  268,  268,  268,    0,    0,    0,    0,    0,
        0,    0,    0,  268,    0,    0,  268,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  268,  271,  271,  271,

      271,    0,    0,    0,    0,    0,    0,    0,    0,  271,
        0,    0,  271,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  271,  277,  277,  277,  277,    0,    0,    0,
        0,    0,  277,    0,    0,    0,    0,  277,  303,  303,
      303,  303,  303,  303,  304,  304,  304,  304,  304,  304,
      305,  305,  305,  305,  305,  305,  306,  306,  306,  306,
      306,  306,  307,  307,  307,  307,  307,  307,  308,  308,
      308,  308,  308,  308,  309,  309,  309,  309,  309,  309,
      310,  310,  310,  310,  310,  310,  311,  311,  311,  311,
      311,  311,  312,  312,  312,  312,  312,  312,  313,  313,

      313,  313,  313,  313,  314,  314,  314,  314,  314,  314,
      315,  315,  315,  315,  315,  315,  316,  316,  316,  316,
      316,  316,  317,  317,    0,  317,  318,  318,  318,  318,
      318,  318,  319,  319,  319,  319,  319,  319,  320,  320,
      320,  320,  320,  320,  321,  321,  321,  321,  321,  321,
      322,  322,  322,  322,  322,  322,  323,  323,  323,  323,
      323,  323,  325,  325,  325,  325,  325,  326,  326,  326,
      326,  326,  326,  327,  327,  327,  327,  327,  327,  328,
      328,  328,  328,  328,  328,  329,  329,  329,  329,  331,
      331,  331,  331,  331,  332,    0,  332,  332,  333,    0,

      333,  334,  334,  334,  334,  334,  335,  335,  335,  335,
      335,  336,  336,  336,  336,  336,  337,  337,  337,  337,
      337,  338,  338,  338,  338,  338,  338,  339,  339,  339,
      339,  339,  339,  340,  340,  340,  340,  340,  340,  341,
      341,  341,  341,  341,  341,  342,  342,  342,  342,  342,
      342,  343,  343,  343,  343,  343,  343,  344,  344,  344,
      344,  344,  344,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "markdown.grammar"
#line 889 "lex.markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int markdownlex_init (yyscan_t* scanner);

int markdownlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int markdownlex_destroy (yyscan_t yyscanner );

int markdownget_debug (yyscan_t yyscanner );

void markdownset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE markdownget_extra (yyscan_t yyscanner );

void markdownset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *markdownget_in (yyscan_t yyscanner );

void markdownset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *markdownget_out (yyscan_t yyscanner );

void markdownset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t markdownget_leng (yyscan_t yyscanner );

char *markdownget_text (yyscan_t yyscanner );

int markdownget_lineno (yyscan_t yyscanner );

void markdownset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int markdownwrap (yyscan_t yyscanner );
#else
extern int markdownwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int markdownlex (yyscan_t yyscanner);

#define YY_DECL int markdownlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 35 "markdown.grammar"


#line 1114 "lex.markdown.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			markdownensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		markdown_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 303 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1564 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 37 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNEM, yyscanner);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 38 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONG, yyscanner);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 39 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONGEM, yyscanner);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 40 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHEADER, yyscanner);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 41 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNMULTILINEHEADER, yyscanner);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 42 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNURL, yyscanner);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 43 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHREF, yyscanner);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 44 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNBULLETSTART, yyscanner);}
	YY_BREAK
case 9:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 46 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNNEWLINE, yyscanner);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 47 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNPARAGRAPH, yyscanner);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 48 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 49 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "markdown.grammar"
ECHO;
	YY_BREAK
#line 1273 "lex.markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( markdownwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			markdownrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 303 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 303 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 302);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					markdownrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( markdownwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void markdownrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        markdownensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	markdown_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	markdown_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		markdownpop_buffer_state();
	 *		markdownpush_buffer_state(new_buffer);
     */
	markdownensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	markdown_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (markdownwrap()) processing, but the only time this flag
	 * is looked at is after markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void markdown_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE markdown_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) markdownalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	markdown_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with markdown_create_buffer()
 * @param yyscanner The scanner object.
 */
    void markdown_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		markdownfree((void *) b->yy_ch_buf ,yyscanner );

	markdownfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a markdownrestart() or at EOF.
 */
    static void markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	markdown_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then markdown_init_buffer was _probably_
     * called from markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void markdown_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		markdown_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	markdownensure_buffer_stack(yyscanner);

	/* This block is copied from markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from markdown_switch_to_buffer. */
	markdown_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void markdownpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		markdown_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void markdownensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE markdown_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	markdown_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE markdown_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return markdown_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) markdownalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = markdown_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE markdownget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int markdownget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int markdownget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t markdownget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *markdownget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void markdownset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "markdownset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "markdownset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see markdown_switch_to_buffer
 */
void markdownset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void markdownset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int markdownget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void markdownset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* markdownlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int markdownlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* markdownlex_init_extra has the same functionality as markdownlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to markdownalloc in
 * the yyextra field.
 */

int markdownlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    markdownset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    markdownset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from markdownlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * markdownlex_init()
     */
    return 0;
}

/* markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int markdownlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		markdownpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	markdownfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        markdownfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * markdownlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    markdownfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *markdownalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *markdownrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void markdownfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 51 "markdown.grammar"



int markdownwrap(yyscan_t yyscanner){return 1;}

void* markdowngetextravar(yyscan_t yyscanner) {
  if (yyscanner) {
    struct yyguts_t* guts = (struct yyguts_t *)yyscanner;
    return guts->yyextra_r;
  }
  return NULL;
}

void markdownsetextravar(yyscan_t yyscanner, void* value) {
  if (yyscanner) {
    struct yyguts_t* guts = (struct yyguts_t *)yyscanner;
    guts->yyextra_r = value;
  }
}


