//
// Copyright 2012 Jeff Verkoeyen
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "MarkdownTokens.h"

#line 3 "lex.markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer markdown_create_buffer
#define yy_delete_buffer markdown_delete_buffer
#define yy_flex_debug markdown_flex_debug
#define yy_init_buffer markdown_init_buffer
#define yy_flush_buffer markdown_flush_buffer
#define yy_load_buffer_state markdown_load_buffer_state
#define yy_switch_to_buffer markdown_switch_to_buffer
#define yyin markdownin
#define yyleng markdownleng
#define yylex markdownlex
#define yylineno markdownlineno
#define yyout markdownout
#define yyrestart markdownrestart
#define yytext markdowntext
#define yywrap markdownwrap
#define yyalloc markdownalloc
#define yyrealloc markdownrealloc
#define yyfree markdownfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE markdownrestart(markdownin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t markdownleng;

extern FILE *markdownin, *markdownout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up markdowntext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up markdowntext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via markdownrestart()), so that the user can continue scanning by
	 * just pointing markdownin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when markdowntext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t markdownleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow markdownwrap()'s to do buffer switches
 * instead of setting up a fresh markdownin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void markdownrestart (FILE *input_file  );
void markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE markdown_create_buffer (FILE *file,int size  );
void markdown_delete_buffer (YY_BUFFER_STATE b  );
void markdown_flush_buffer (YY_BUFFER_STATE b  );
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void markdownpop_buffer_state (void );

static void markdownensure_buffer_stack (void );
static void markdown_load_buffer_state (void );
static void markdown_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER markdown_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE markdown_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE markdown_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE markdown_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *markdownalloc (yy_size_t  );
void *markdownrealloc (void *,yy_size_t  );
void markdownfree (void *  );

#define yy_new_buffer markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        markdownensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(markdownin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        markdownensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(markdownin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *markdownin = (FILE *) 0, *markdownout = (FILE *) 0;

typedef int yy_state_type;

extern int markdownlineno;

int markdownlineno = 1;

extern char *markdowntext;
#define yytext_ptr markdowntext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up markdowntext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	markdownleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 13
#define YY_END_OF_BUFFER 14
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[375] =
    {   0,
        0,    0,   14,   12,   11,   11,   11,   12,   12,   12,
       12,   12,   12,   12,    4,   12,    0,    0,   10,    0,
        0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    1,    4,    4,    8,    0,    0,   10,
        9,    0,    1,    0,    1,    0,    0,    0,    0,    0,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,    5,    5,    0,    0,    0,
        0,    0,    0,    2,    6,    0,    6,    6,    0,    6,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    5,    0,    0,    0,    0,    0,    0,    2,

        4,    2,    2,    5,    0,    0,    0,    0,    0,    6,
        0,    6,    6,    6,    0,    6,    6,    6,    6,    0,
        0,    0,    0,    0,    6,    0,    0,    0,    0,    5,
        0,    0,    0,    0,    0,    4,    0,    5,    3,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        0,    6,    6,    0,    0,    0,    7,    6,    6,    0,
        0,    5,    0,    4,    3,    6,    6,    6,    6,    0,
        6,    6,    6,    6,    6,    0,    6,    6,    6,    6,
        6,    0,    6,    6,    6,    6,    6,    0,    0,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    0,    6,    6,    6,    6,    6,    6,    6,    6,
        0,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        5,    6,    6,    6,    6,    6,    6,    6,    6,    0,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    0,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    6,    7,    6,    6,    6,    6,    8,
        9,   10,    6,    6,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    6,    6,
       16,    6,    6,    6,   14,   14,   14,   14,   14,   17,
       18,   19,   18,   18,   18,   18,   18,   18,   18,   20,
       18,   18,   21,   22,   18,   18,   18,   18,   18,   18,
       23,   24,   25,    6,   26,    6,   14,   14,   14,   14,

       14,   27,   18,   28,   18,   18,   18,   18,   18,   18,
       18,   29,   18,   18,   30,   31,   18,   18,   18,   18,
       18,   18,    6,    6,    6,    6,    1,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32
    } ;

static yyconst flex_int32_t yy_meta[33] =
    {   0,
        1,    1,    1,    1,    2,    3,    3,    3,    3,    3,
        4,    5,    6,    4,    3,    7,    4,    4,    4,    4,
        4,    4,    3,    4,    3,    3,    4,    4,    4,    4,
        4,    4
    } ;

static yyconst flex_int16_t yy_base[424] =
    {   0,
        0,   26,  743,  728,  726,  715,   31,   32,   42,   53,
       54,  712,   85,   74,   75,   85,  710,   81,  707,   35,
       88,   93,   91,  683,  102,  134,   98,  127,   80,    0,
      160,  114,  130,  140,  684,  104,  675,  142,  139,  658,
      141,   36,  656,  594, 2124,  157,  105,  159,  168,  177,
      199,  231,  588,  257,  225,  160,  178,  227,  165,  568,
      238,  199,  174,  221,  208, 2124,  543,  173,  537,  517,
      262,  247,  265,  253,  274,  306,  512,  323,  355,    0,
      381,  300,  253,  239,  113,  306,  211,  509,  487,  266,
      273,  305,  460,  263,  459,  362,  450,  312,  350,  322,

      276,  465, 2124,  449,  325,  442,  424,  364,  336,    0,
      408,    0,  434,    0,  461,  418,  487,  504,  354,  403,
      373,  357,  388,  390,  390,  390,  315,  527,  402,  370,
      398,  366,  415,  353,  402,  310,  367,  354,  360,    0,
      553,  429,  406,    0,  579,  438,  429,  455,   82,  350,
      430,  455,  457,  460,  466,  606,  493,    0,  637,  480,
      481,  323,  304,  326, 2124,  510,  486,  311,  378,  492,
      508,  526,  519,  534,  408,  535,  287,  663,  546,  444,
      689,  551,  706,  468,  728,  760,  552,  558,  560,  572,
      494,  786,  574,  294,  578,  629,  529,  812,  630,  631,

      635,  636,    0,  587,  256,  829,  861,    0,  887,  655,
      656,  657,  662,  671,  682,  687,  694,  705,  727,  752,
        0,  904,  926,  958,  210,  984, 1011,  753,  754,  758,
      759,  778,  779,  780,  784,  785,  804,  805, 1033, 1065,
      147, 1082, 1114,    0, 1140,  133,  810,  181, 1157,  822,
     1189,  827,  828,  853,  854,  855,  859,  860,  879,  880,
        0, 1216,    0, 1242,    0, 1269,  132, 1295, 1322,  881,
     1344,  885,  548, 1376,  953, 1402,  886,  974,  902,  903,
      924, 1428,    0, 1443, 1470,  953,    0, 1501,   81,  954,
      241, 1528,  979, 1560,  980,  560, 1587,  989,  586, 1613,

     1032, 1057, 1058, 1639,    0, 1059,   78,  644, 1655, 1063,
      670, 1064, 1080,    0, 1682,  988, 1708, 1081,  686, 1734,
     1106, 1107, 1108, 1112, 1113,  696, 1760, 1132, 1144, 1134,
     1136,    0, 1786, 1155, 1156, 1181, 1182, 1183, 1187, 1188,
     1208, 1209, 1210, 1214, 1215, 1234, 1235, 1236, 1240, 1241,
     1261, 1262, 1263, 1267, 1268, 1287, 1288, 1289, 1294, 1342,
     1343, 1368, 1369, 1370, 1374, 1375, 1394, 1395, 1409, 1410,
     1411, 1426, 1435, 2124, 1813, 1820, 1827, 1834, 1841, 1848,
     1855, 1862, 1869, 1876, 1883, 1890, 1897, 1904, 1908, 1915,
     1922, 1929, 1936, 1943, 1950,   76, 1956, 1963, 1970, 1977,

     1981,   75, 1987, 1991, 1995, 2000, 2006, 2012, 2018, 2025,
     2032, 2039, 2046, 2053, 2060, 2067, 2074, 2081, 2088, 2095,
     2102, 2109, 2116
    } ;

static yyconst flex_int16_t yy_def[424] =
    {   0,
      374,    1,  374,  375,  375,  374,  375,  376,  374,    9,
        9,  377,  378,  379,  380,    9,  375,  374,  374,  375,
      376,  381,  382,    9,    9,  383,    9,    9,  377,    9,
        9,  379,  384,  385,  380,  380,  375,    9,  374,  374,
      374,  375,  375,  381,  374,  381,  382,  386,  387,   25,
        9,  388,    9,    9,    9,    9,  377,  389,   31,  384,
      384,  385,  390,  391,  380,  374,  381,  375,  386,  374,
      386,  387,  392,  375,   51,  393,   51,   75,  394,   51,
       51,  389,   54,  375,    9,    9,  395,   82,  396,   82,
      397,   31,  384,  375,  390,  390,  374,  391,  398,  375,

      380,  375,  374,  386,  375,  392,  374,  392,  375,   75,
      399,   75,   75,   78,  400,   51,   51,  401,   81,  402,
       54,  375,  395,  395,  401,  403,   82,   82,   31,  390,
      375,  398,  398,  374,  375,  380,  374,  392,  375,   75,
       75,  404,  113,   78,   78,  125,  117,  125,  405,  125,
      406,   81,  404,  407,   54,  374,  395,  125,  125,  128,
       31,  398,  374,  380,  374,  404,  141,  166,  166,  408,
      113,  405,  145,  117,  405,  409,  125,  125,   81,  166,
      166,   54,  156,  410,  156,  411,  159,  128,   31,  141,
      166,  181,  113,  172,  145,  117,  172,  172,  178,   81,

      181,   54,  410,  410,  185,  156,  412,  185,  185,  159,
      128,  141,  192,  113,  145,  117,  198,  178,   81,  181,
      410,  156,  185,  413,  185,  185,  374,  209,  159,  128,
      141,  192,  113,  145,  117,  198,  178,  181,  223,  414,
      223,  239,  415,  223,  223,  227,  226,  227,  410,  227,
      416,  209,  159,  128,  141,  192,  145,  198,  178,  181,
      239,  417,  239,  239,  242,  418,  223,  223,  374,  245,
      410,  226,  269,  419,  227,  227,  209,  125,  192,  198,
      178,  166,  239,  239,  374,  264,  242,  242,  269,  268,
      269,  374,  269,  420,  245,  285,  421,  226,  269,  269,

      276,  209,  192,  172,  285,  284,  285,  285,  422,  264,
      292,  288,  268,  292,  423,  269,  300,  245,  285,  285,
      226,  300,  276,  209,  284,  285,  320,  264,  292,  288,
      268,  292,  292,  317,  245,  320,  226,  300,  276,  284,
      327,  264,  288,  268,  333,  317,  245,  320,  300,  276,
      284,  327,  264,  288,  268,  333,  317,  320,  300,  276,
      284,  327,  288,  333,  317,  320,  300,  327,  333,  317,
      320,  327,  333,    0,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374
    } ;

static yyconst flex_int16_t yy_nxt[2157] =
    {   0,
        4,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        9,    4,    4,    9,    4,    4,   10,    9,   11,    9,
        9,    9,   12,   13,    4,   14,   10,   11,    9,    9,
        9,    9,   15,   18,   22,   20,   16,   41,   41,   42,
       42,   23,   17,   17,   18,   17,   17,   17,   17,   17,
       17,   17,   24,   25,   17,   24,   17,   17,   24,   24,
       24,   24,   24,   24,   17,   26,   17,   17,   24,   24,
       24,   24,   24,   24,   27,   28,   33,   18,  153,  125,
      221,   36,   18,   27,   28,   17,   17,   18,   17,   37,
       22,   39,  271,   48,  149,   38,   39,   43,   31,   34,

       49,   31,   45,   46,   57,  176,   18,   48,   46,   50,
       65,   31,   51,   17,   68,   51,   33,   55,   51,   51,
       51,   51,   51,   51,   50,   52,   55,   84,   51,   51,
       51,   51,   51,   51,   17,   17,   18,   17,   50,   43,
       61,   66,   63,  222,  271,   61,   37,   54,   56,   39,
       54,   39,   38,   50,   39,   45,   39,   56,  222,   67,
       54,   30,   58,   30,   30,   64,   45,   46,   70,   71,
       73,   50,   46,   59,   71,   18,   59,   74,   92,   86,
       18,   92,  102,  221,   96,   87,   59,   75,   86,   96,
       75,   92,  271,   75,   75,   75,   75,   75,   75,   97,

       76,   63,   57,   75,   75,   75,   75,   75,   75,   77,
       18,   78,   77,   18,  101,   77,   77,   77,   77,   77,
       77,  222,   79,   99,   94,   77,   77,   77,   77,   77,
       77,   17,   17,   18,   17,  124,   50,   88,   89,   84,
       93,   18,   39,  221,   81,   85,  100,   81,   61,   73,
       91,  122,  271,   61,   85,   18,  105,   81,   53,   82,
       53,   53,  109,   45,  104,   18,  121,  222,   50,  121,
       83,   70,   71,   83,  107,  108,   90,   71,   18,  121,
      108,  374,  136,   83,  110,   17,  128,  110,  102,  128,
      110,  110,  110,  110,  110,  110,   66,  111,  120,  128,

      110,  110,  110,  110,  110,  110,   17,   17,   18,   17,
       88,  120,   18,   66,   99,   39,  164,   50,  129,  113,
       84,  129,  113,   91,   18,   90,   85,   18,   18,  165,
      374,  129,  113,  114,  109,   85,  114,  131,   18,  114,
      114,  114,  114,  114,  114,  139,  115,  135,  134,  114,
      114,  114,  114,  114,  114,   17,   17,   18,   17,   18,
      133,  120,   18,  107,  130,  133,  138,  152,  117,  156,
      152,  117,   96,  107,  108,  134,  165,   96,  163,  108,
      152,  117,   80,  118,   80,   80,  155,   97,  169,  155,
       18,  134,   18,  374,  119,   97,  157,  119,  157,  155,

       18,   89,  149,  159,   18,  374,  159,  119,   17,   17,
       18,   17,  124,  151,  124,  161,  159,  162,  161,  171,
      149,  141,  171,  135,  141,  133,  154,  139,  161,   50,
      133,  176,  171,  137,  141,  112,  142,  112,  112,  168,
      134,  149,  174,  178,   39,  174,  178,  143,  148,  120,
      143,  107,  170,   39,  169,  174,  178,   66,   70,  374,
      143,   17,   17,   18,   17,  148,  120,   18,  179,  149,
       39,  179,  374,  181,  145,  103,  181,  145,  204,  182,
      170,  179,  182,  204,   97,   45,  181,  145,  116,  146,
      116,  116,  182,  188,  189,   18,  188,  189,   50,  190,

      147,  157,  190,  147,  169,  192,  188,  189,  192,  374,
      126,   66,  190,  147,  148,   89,  149,  124,  192,   39,
      168,  193,  149,   50,  193,   39,  103,  151,  127,  127,
      127,  127,  195,  170,  193,  195,  194,   90,  149,  175,
      160,   39,  374,  160,  374,  195,   70,  196,  198,  176,
      196,  198,   45,  160,  140,  166,  140,  140,  293,  200,
      196,  198,  200,  203,  202,  210,  167,  202,  210,  167,
      308,  211,  200,   24,  211,  203,   24,  202,  210,  167,
      144,  172,  144,  144,  211,  212,   24,  214,  212,  221,
      214,  215,  173,   45,  215,  173,  293,  204,  212,   50,

      214,  203,  204,   45,  215,  173,  183,  183,  184,  183,
       17,  183,  183,  183,  183,  183,  185,  183,  183,  185,
      183,  183,  185,  185,  185,  185,  185,  185,  183,  186,
      183,  183,  185,  185,  185,  185,  185,  185,  158,  158,
      158,  158,  216,  218,  219,  216,  218,  219,  220,   24,
      187,  220,   24,  187,  308,  216,  218,  219,   18,  203,
       40,  220,   24,  187,  177,  177,  177,  177,  229,  230,
      231,  229,  230,  231,  120,  232,  199,   18,  232,  199,
      329,  229,  230,  231,  233,  204,   18,  233,  232,  199,
      180,  180,  180,  180,   50,  234,  308,  233,  234,  169,

      235,  203,  201,  235,  374,  201,  308,  236,  234,   40,
      236,  203,   18,  235,   18,  201,  183,   19,  237,  183,
      236,  237,  183,  183,  183,  183,  183,  183,   18,  183,
       18,  237,  183,  183,  183,  183,  183,  183,  205,  206,
       77,  205,  374,   77,  205,  205,  205,  205,  205,  205,
      374,  207,  374,   77,  205,  205,  205,  205,  205,  205,
      183,  183,  184,  183,   30,  238,  252,  253,  238,  252,
      253,  254,  255,  209,  254,  255,  209,  374,  238,  252,
      253,  374,  374,  374,  254,  255,  209,  191,  191,  191,
      191,  256,  110,  257,  256,  110,  257,   77,  258,  213,

       77,  258,  213,  374,  256,  110,  257,  374,  374,  374,
       77,  258,  213,  197,  197,  197,  197,  259,  260,  374,
      259,  260,  175,  272,  374,  217,  272,  374,  217,  374,
      259,  260,  250,  271,  374,  374,  272,  203,  217,  223,
      277,  278,  223,  277,  278,  223,  223,  223,  223,  223,
      223,  374,  224,  277,  278,  223,  223,  223,  223,  223,
      223,  183,  183,  184,  183,   53,   90,  110,  279,   90,
      110,  279,  114,  280,  226,  114,  280,  226,  374,   90,
      110,  279,  374,  374,  374,  114,  280,  226,  208,  227,
      208,   30,  281,  282,  295,  281,  282,  295,  298,  302,

      228,  298,  302,  228,  374,  281,  282,  295,  374,  374,
      374,  298,  302,  228,  239,  303,  304,  239,  303,  304,
      239,  239,  239,  239,  239,  239,  374,  240,  303,  304,
      239,  239,  239,  239,  239,  239,  241,  150,  242,  241,
      150,  374,  241,  241,  241,  241,  241,  241,  374,  243,
      150,  374,  241,  241,  241,  241,  241,  241,  183,  183,
      184,  183,   80,  250,  271,  374,  310,  313,  203,  310,
      313,  245,  374,  374,  245,  158,  158,  158,  158,  310,
      313,  374,  374,  374,  245,  225,  246,  225,   53,  293,
      271,  374,  374,  318,  203,  222,  318,  247,  293,  271,

      247,  374,  321,  203,  374,  321,  318,  374,  374,  374,
      247,  203,  203,  203,  203,  321,  203,  203,  203,  203,
      203,  248,  249,  203,  250,  203,  204,  250,  250,  250,
      250,  250,  250,  203,  251,  203,  203,  250,  250,  250,
      250,  250,  250,  261,  183,  323,  261,  374,  323,  261,
      261,  261,  261,  261,  261,  374,  262,  374,  323,  261,
      261,  261,  261,  261,  261,  183,  183,  184,  183,  112,
      324,  169,  325,  324,  169,  325,  328,  330,  264,  328,
      330,  264,  374,  324,  169,  325,  374,  374,  374,  328,
      330,  264,  265,  331,  335,  265,  331,  335,  265,  265,

      265,  265,  265,  265,  374,  266,  331,  335,  265,  265,
      265,  265,  265,  265,  183,  183,  184,  183,  116,  337,
      338,  339,  337,  338,  339,  205,  340,  268,  205,  340,
      268,  374,  337,  338,  339,  374,  374,  374,  205,  340,
      268,  244,  269,  244,   80,  342,  221,  343,  342,  344,
      343,  374,  344,  270,  329,  374,  270,  374,  342,  204,
      343,  374,  344,  374,  374,  374,  270,  273,  346,  347,
      273,  346,  347,  273,  273,  273,  273,  273,  273,  374,
      274,  346,  347,  273,  273,  273,  273,  273,  273,  203,
      203,  203,  203,  127,  348,  205,  349,  348,  205,  349,

      350,  351,  276,  350,  351,  276,  374,  348,  205,  349,
      374,  374,  374,  350,  351,  276,  183,  183,  184,  183,
      140,  352,  353,  354,  352,  353,  354,  355,  356,  284,
      355,  356,  284,  374,  352,  353,  354,  374,  374,  374,
      355,  356,  284,  263,  285,  263,  112,  357,  241,  358,
      357,  241,  358,  359,  360,  286,  359,  360,  286,  374,
      357,  241,  358,  374,  374,  374,  359,  360,  286,  183,
      183,  184,  183,  144,  361,  362,  261,  361,  362,  261,
      363,  241,  288,  363,  241,  288,  374,  361,  362,  261,
      374,  374,  374,  363,  241,  288,  267,  289,  267,  116,

      364,  365,  366,  364,  365,  366,  222,  367,  290,  374,
      367,  290,  374,  364,  365,  366,  374,  374,  374,  374,
      367,  290,  203,  203,  203,  203,  374,  203,  203,  203,
      203,  203,  291,  249,  292,  293,  203,  204,  293,  293,
      293,  293,  293,  293,  203,  294,  203,  203,  293,  293,
      293,  293,  293,  293,  296,  250,  261,  296,  250,  261,
      296,  296,  296,  296,  296,  296,  374,  297,  250,  261,
      296,  296,  296,  296,  296,  296,  203,  203,  203,  203,
      158,  368,  265,  369,  368,  265,  369,  370,  371,  300,
      370,  371,  300,  374,  368,  265,  369,  374,  374,  374,

      370,  371,  300,  275,  275,  275,  127,  293,  372,  374,
      293,  372,  250,  271,  374,  301,  374,  203,  301,  374,
      293,  372,  373,  293,  308,  373,  293,  308,  301,  180,
      180,  180,  180,  374,  374,  373,  293,  308,  169,  308,
      374,  374,  308,  374,  283,  305,  283,  140,  314,  374,
      374,  314,  308,  374,  374,  374,  306,  374,  374,  306,
      374,  314,  374,  374,  374,  374,  374,  374,  374,  306,
      203,  203,  203,  203,  374,  203,  203,  203,  203,  203,
      307,  203,  292,  308,  203,  204,  308,  308,  308,  308,
      308,  308,  203,  309,  203,  203,  308,  308,  308,  308,

      308,  308,  287,  311,  287,  144,  374,  374,  374,  374,
      374,  374,  374,  374,  312,  374,  374,  312,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  312,  203,  203,
      203,  203,  374,  203,  203,  203,  203,  203,  314,  203,
      292,  314,  203,  203,  314,  314,  314,  314,  314,  314,
      203,  315,  203,  203,  314,  314,  314,  314,  314,  314,
      203,  203,  203,  203,  177,  374,  374,  374,  374,  374,
      374,  374,  374,  317,  374,  374,  317,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  317,  203,  203,  203,
      203,  180,  374,  374,  374,  374,  374,  374,  374,  374,

      320,  374,  374,  320,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  320,  299,  299,  299,  158,  374,  374,
      374,  374,  374,  293,  374,  374,  322,  374,  203,  322,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  322,
      197,  197,  197,  197,  374,  374,  374,  374,  374,  175,
      374,  374,  374,  374,  374,  203,  203,  203,  203,  191,
      374,  374,  374,  374,  374,  374,  374,  374,  327,  374,
      374,  327,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  327,  203,  203,  203,  203,  197,  374,  374,  374,
      374,  374,  374,  374,  374,  333,  374,  374,  333,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  333,  316,
      316,  316,  177,  374,  374,  374,  374,  374,  374,  271,
      374,  334,  374,  374,  334,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  334,  319,  319,  319,  180,  374,
      374,  374,  374,  374,  308,  374,  374,  336,  374,  203,
      336,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      336,  326,  326,  326,  191,  374,  374,  374,  374,  374,
      374,  374,  374,  341,  374,  374,  341,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  341,  332,  332,  332,
      197,  374,  374,  374,  374,  374,  374,  374,  374,  345,

      374,  374,  345,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  345,   17,   17,   17,   17,   17,   17,   17,
       21,   21,   21,   21,   21,   21,   21,   29,   29,   29,
       29,   29,   29,   29,   30,   30,   30,   30,   30,   30,
       30,   32,   32,   32,   32,   32,   32,   32,   35,   35,
       35,   35,   35,   35,   35,   44,   44,   44,   44,   44,
       44,   44,   47,   47,   47,   47,   47,   47,   47,   53,
       53,   53,   53,   53,   53,   53,   60,   60,   60,   60,
       60,   60,   60,   62,   62,   62,   62,   62,   62,   62,
       69,   69,   69,   69,   69,   69,   69,   72,   72,   72,

       72,   72,   72,   72,   80,   80,   80,   80,   80,   80,
       80,   90,   90,  374,   90,   95,   95,   95,   95,   95,
       95,   95,   98,   98,   98,   98,   98,   98,   98,  106,
      106,  106,  106,  106,  106,  106,  112,  112,  112,  112,
      112,  112,  112,  116,  116,  116,  116,  116,  116,  116,
      123,  123,  123,  123,  123,  123,  123,  127,  127,  127,
      127,  127,  127,  132,  132,  132,  132,  132,  132,  132,
      140,  140,  140,  140,  140,  140,  140,  144,  144,  144,
      144,  144,  144,  144,  150,  150,  150,  150,  158,  158,
      158,  158,  158,  158,  169,  374,  169,  169,  175,  374,

      175,  177,  177,  177,  177,  177,  177,  180,  180,  180,
      180,  180,  180,  191,  191,  191,  191,  191,  191,  197,
      197,  197,  197,  197,  197,  203,  374,  203,  203,  203,
      203,  203,  208,  208,  208,  208,  208,  208,  208,  225,
      225,  225,  225,  225,  225,  225,  244,  244,  244,  244,
      244,  244,  244,  263,  263,  263,  263,  263,  263,  263,
      267,  267,  267,  267,  267,  267,  267,  275,  275,  275,
      275,  275,  275,  275,  283,  283,  283,  283,  283,  283,
      283,  287,  287,  287,  287,  287,  287,  287,  299,  299,
      299,  299,  299,  299,  299,  316,  316,  316,  316,  316,

      316,  316,  319,  319,  319,  319,  319,  319,  319,  326,
      326,  326,  326,  326,  326,  326,  332,  332,  332,  332,
      332,  332,  332,    3,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374
    } ;

static yyconst flex_int16_t yy_chk[2157] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    7,    8,    7,    2,   20,   42,   20,
       42,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   10,   11,   14,   15,  402,  396,
      307,   15,   29,   10,   11,   13,   13,   13,   13,   16,
       21,   18,  289,   23,  149,   16,   18,   21,   13,   14,

       23,   13,   22,   22,   29,  149,   36,   47,   22,   27,
       36,   13,   25,   25,   47,   25,   32,   27,   25,   25,
       25,   25,   25,   25,   85,   25,   27,   85,   25,   25,
       25,   25,   25,   25,   26,   26,   26,   26,   28,   32,
       33,   39,   34,  267,  246,   33,   38,   26,   28,   39,
       26,   41,   38,   38,   39,   33,   41,   28,  241,   46,
       26,   31,   31,   31,   31,   34,   46,   46,   48,   48,
       49,   56,   46,   31,   48,   68,   31,   49,   59,   56,
       57,   59,   68,  248,   63,   57,   31,   50,   56,   63,
       50,   59,  248,   50,   50,   50,   50,   50,   50,   63,

       50,   62,   57,   50,   50,   50,   50,   50,   50,   51,
       65,   51,   51,   87,   65,   51,   51,   51,   51,   51,
       51,  225,   51,   64,   62,   51,   51,   51,   51,   51,
       51,   52,   52,   52,   52,   87,   55,   58,   58,   55,
       61,   84,   58,  291,   52,   55,   64,   52,   61,   72,
       58,   84,  291,   61,   55,   74,   72,   52,   54,   54,
       54,   54,   74,   61,   71,   94,   83,  205,   54,   83,
       54,   71,   71,   54,   73,   73,   90,   71,  101,   83,
       73,   90,  101,   54,   75,   75,   91,   75,   94,   91,
       75,   75,   75,   75,   75,   75,  194,   75,  177,   91,

       75,   75,   75,   75,   75,   75,   76,   76,   76,   76,
       82,   82,  136,  168,   98,   82,  136,   86,   92,   76,
       86,   92,   76,   82,  100,  127,   86,  105,  164,  163,
      127,   92,   76,   78,  105,   86,   78,   98,  109,   78,
       78,   78,   78,   78,   78,  109,   78,  100,  162,   78,
       78,   78,   78,   78,   78,   79,   79,   79,   79,  122,
       99,  150,  139,  138,   96,   99,  108,  119,   79,  122,
      119,   79,   96,  108,  108,   99,  137,   96,  134,  108,
      119,   79,   81,   81,   81,   81,  121,   96,  169,  121,
      123,  132,  124,  169,   81,  130,  123,   81,  124,  121,

      131,  125,  125,  126,  135,  125,  126,   81,  111,  111,
      111,  111,  123,  125,  124,  129,  126,  133,  129,  143,
      175,  111,  143,  131,  111,  133,  120,  135,  129,  116,
      133,  175,  143,  107,  111,  113,  113,  113,  113,  142,
      133,  142,  147,  151,  142,  147,  151,  113,  146,  146,
      113,  106,  142,  146,  180,  147,  151,  148,  104,  180,
      113,  115,  115,  115,  115,  148,  148,  102,  152,  153,
      148,  152,  153,  154,  115,   97,  154,  115,  184,  155,
      153,  152,  155,  184,   95,   93,  154,  115,  117,  117,
      117,  117,  155,  160,  161,  157,  160,  161,  117,  167,

      117,  157,  167,  117,  191,  170,  160,  161,  170,  191,
       89,   88,  167,  117,  118,  118,  118,  157,  170,  118,
      166,  171,  166,   77,  171,  166,   70,  118,  128,  128,
      128,  128,  173,  166,  171,  173,  172,  128,  172,  197,
      128,  172,  128,  128,  197,  173,   69,  174,  176,  172,
      174,  176,   67,  128,  141,  141,  141,  141,  273,  179,
      174,  176,  179,  273,  182,  187,  141,  182,  187,  141,
      296,  188,  179,  189,  188,  296,  189,  182,  187,  141,
      145,  145,  145,  145,  188,  190,  189,  193,  190,  204,
      193,  195,  145,   60,  195,  145,  299,  204,  190,   53,

      193,  299,  204,   44,  195,  145,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  159,  159,
      159,  159,  196,  199,  200,  196,  199,  200,  201,  202,
      159,  201,  202,  159,  308,  196,  199,  200,   43,  308,
       40,  201,  202,  159,  178,  178,  178,  178,  210,  211,
      212,  210,  211,  212,  178,  213,  178,   37,  213,  178,
      311,  210,  211,  212,  214,  311,   35,  214,  213,  178,
      181,  181,  181,  181,   24,  215,  319,  214,  215,  181,

      216,  319,  181,  216,  181,  181,  326,  217,  215,   19,
      217,  326,   17,  216,   12,  181,  183,    6,  218,  183,
      217,  218,  183,  183,  183,  183,  183,  183,    5,  183,
        4,  218,  183,  183,  183,  183,  183,  183,  185,  185,
      219,  185,    3,  219,  185,  185,  185,  185,  185,  185,
        0,  185,    0,  219,  185,  185,  185,  185,  185,  185,
      186,  186,  186,  186,  186,  220,  228,  229,  220,  228,
      229,  230,  231,  186,  230,  231,  186,    0,  220,  228,
      229,    0,    0,    0,  230,  231,  186,  192,  192,  192,
      192,  232,  233,  234,  232,  233,  234,  235,  236,  192,

      235,  236,  192,    0,  232,  233,  234,    0,    0,    0,
      235,  236,  192,  198,  198,  198,  198,  237,  238,    0,
      237,  238,  198,  247,    0,  198,  247,  198,  198,    0,
      237,  238,  250,  250,    0,    0,  247,  250,  198,  206,
      252,  253,  206,  252,  253,  206,  206,  206,  206,  206,
      206,    0,  206,  252,  253,  206,  206,  206,  206,  206,
      206,  207,  207,  207,  207,  207,  254,  255,  256,  254,
      255,  256,  257,  258,  207,  257,  258,  207,    0,  254,
      255,  256,    0,    0,    0,  257,  258,  207,  209,  209,
      209,  209,  259,  260,  270,  259,  260,  270,  272,  277,

      209,  272,  277,  209,    0,  259,  260,  270,    0,    0,
        0,  272,  277,  209,  222,  279,  280,  222,  279,  280,
      222,  222,  222,  222,  222,  222,    0,  222,  279,  280,
      222,  222,  222,  222,  222,  222,  223,  281,  223,  223,
      281,    0,  223,  223,  223,  223,  223,  223,    0,  223,
      281,    0,  223,  223,  223,  223,  223,  223,  224,  224,
      224,  224,  224,  275,  275,    0,  286,  290,  275,  286,
      290,  224,    0,    0,  224,  278,  278,  278,  278,  286,
      290,    0,    0,    0,  224,  226,  226,  226,  226,  293,
      293,    0,    0,  295,  293,  226,  295,  226,  316,  316,

      226,    0,  298,  316,    0,  298,  295,    0,    0,    0,
      226,  227,  227,  227,  227,  298,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  239,  239,  301,  239,    0,  301,  239,
      239,  239,  239,  239,  239,    0,  239,    0,  301,  239,
      239,  239,  239,  239,  239,  240,  240,  240,  240,  240,
      302,  303,  306,  302,  303,  306,  310,  312,  240,  310,
      312,  240,    0,  302,  303,  306,    0,    0,    0,  310,
      312,  240,  242,  313,  318,  242,  313,  318,  242,  242,

      242,  242,  242,  242,    0,  242,  313,  318,  242,  242,
      242,  242,  242,  242,  243,  243,  243,  243,  243,  321,
      322,  323,  321,  322,  323,  324,  325,  243,  324,  325,
      243,    0,  321,  322,  323,    0,    0,    0,  324,  325,
      243,  245,  245,  245,  245,  328,  329,  330,  328,  331,
      330,    0,  331,  245,  329,    0,  245,    0,  328,  329,
      330,    0,  331,    0,    0,    0,  245,  249,  334,  335,
      249,  334,  335,  249,  249,  249,  249,  249,  249,    0,
      249,  334,  335,  249,  249,  249,  249,  249,  249,  251,
      251,  251,  251,  251,  336,  337,  338,  336,  337,  338,

      339,  340,  251,  339,  340,  251,    0,  336,  337,  338,
        0,    0,    0,  339,  340,  251,  262,  262,  262,  262,
      262,  341,  342,  343,  341,  342,  343,  344,  345,  262,
      344,  345,  262,    0,  341,  342,  343,    0,    0,    0,
      344,  345,  262,  264,  264,  264,  264,  346,  347,  348,
      346,  347,  348,  349,  350,  264,  349,  350,  264,    0,
      346,  347,  348,    0,    0,    0,  349,  350,  264,  266,
      266,  266,  266,  266,  351,  352,  353,  351,  352,  353,
      354,  355,  266,  354,  355,  266,    0,  351,  352,  353,
        0,    0,    0,  354,  355,  266,  268,  268,  268,  268,

      356,  357,  358,  356,  357,  358,  268,  359,  268,    0,
      359,  268,    0,  356,  357,  358,    0,    0,    0,    0,
      359,  268,  269,  269,  269,  269,    0,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  271,  360,  361,  271,  360,  361,
      271,  271,  271,  271,  271,  271,    0,  271,  360,  361,
      271,  271,  271,  271,  271,  271,  274,  274,  274,  274,
      274,  362,  363,  364,  362,  363,  364,  365,  366,  274,
      365,  366,  274,    0,  362,  363,  364,    0,    0,    0,

      365,  366,  274,  276,  276,  276,  276,  367,  368,    0,
      367,  368,  276,  276,    0,  276,    0,  276,  276,    0,
      367,  368,  369,  370,  371,  369,  370,  371,  276,  282,
      282,  282,  282,    0,    0,  369,  370,  371,  282,  372,
        0,    0,  372,  282,  284,  284,  284,  284,  373,    0,
        0,  373,  372,    0,    0,    0,  284,    0,    0,  284,
        0,  373,    0,    0,    0,    0,    0,    0,    0,  284,
      285,  285,  285,  285,    0,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,

      285,  285,  288,  288,  288,  288,    0,    0,    0,    0,
        0,    0,    0,    0,  288,    0,    0,  288,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  288,  292,  292,
      292,  292,    0,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      294,  294,  294,  294,  294,    0,    0,    0,    0,    0,
        0,    0,    0,  294,    0,    0,  294,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  294,  297,  297,  297,
      297,  297,    0,    0,    0,    0,    0,    0,    0,    0,

      297,    0,    0,  297,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  297,  300,  300,  300,  300,    0,    0,
        0,    0,    0,  300,    0,    0,  300,    0,  300,  300,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  300,
      304,  304,  304,  304,    0,    0,    0,    0,    0,  304,
        0,    0,    0,    0,  304,  309,  309,  309,  309,  309,
        0,    0,    0,    0,    0,    0,    0,    0,  309,    0,
        0,  309,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  309,  315,  315,  315,  315,  315,    0,    0,    0,
        0,    0,    0,    0,    0,  315,    0,    0,  315,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  315,  317,
      317,  317,  317,    0,    0,    0,    0,    0,    0,  317,
        0,  317,    0,    0,  317,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  317,  320,  320,  320,  320,    0,
        0,    0,    0,    0,  320,    0,    0,  320,    0,  320,
      320,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      320,  327,  327,  327,  327,    0,    0,    0,    0,    0,
        0,    0,    0,  327,    0,    0,  327,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  327,  333,  333,  333,
      333,    0,    0,    0,    0,    0,    0,    0,    0,  333,

        0,    0,  333,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  333,  375,  375,  375,  375,  375,  375,  375,
      376,  376,  376,  376,  376,  376,  376,  377,  377,  377,
      377,  377,  377,  377,  378,  378,  378,  378,  378,  378,
      378,  379,  379,  379,  379,  379,  379,  379,  380,  380,
      380,  380,  380,  380,  380,  381,  381,  381,  381,  381,
      381,  381,  382,  382,  382,  382,  382,  382,  382,  383,
      383,  383,  383,  383,  383,  383,  384,  384,  384,  384,
      384,  384,  384,  385,  385,  385,  385,  385,  385,  385,
      386,  386,  386,  386,  386,  386,  386,  387,  387,  387,

      387,  387,  387,  387,  388,  388,  388,  388,  388,  388,
      388,  389,  389,    0,  389,  390,  390,  390,  390,  390,
      390,  390,  391,  391,  391,  391,  391,  391,  391,  392,
      392,  392,  392,  392,  392,  392,  393,  393,  393,  393,
      393,  393,  393,  394,  394,  394,  394,  394,  394,  394,
      395,  395,  395,  395,  395,  395,  395,  397,  397,  397,
      397,  397,  397,  398,  398,  398,  398,  398,  398,  398,
      399,  399,  399,  399,  399,  399,  399,  400,  400,  400,
      400,  400,  400,  400,  401,  401,  401,  401,  403,  403,
      403,  403,  403,  403,  404,    0,  404,  404,  405,    0,

      405,  406,  406,  406,  406,  406,  406,  407,  407,  407,
      407,  407,  407,  408,  408,  408,  408,  408,  408,  409,
      409,  409,  409,  409,  409,  410,    0,  410,  410,  410,
      410,  410,  411,  411,  411,  411,  411,  411,  411,  412,
      412,  412,  412,  412,  412,  412,  413,  413,  413,  413,
      413,  413,  413,  414,  414,  414,  414,  414,  414,  414,
      415,  415,  415,  415,  415,  415,  415,  416,  416,  416,
      416,  416,  416,  416,  417,  417,  417,  417,  417,  417,
      417,  418,  418,  418,  418,  418,  418,  418,  419,  419,
      419,  419,  419,  419,  419,  420,  420,  420,  420,  420,

      420,  420,  421,  421,  421,  421,  421,  421,  421,  422,
      422,  422,  422,  422,  422,  422,  423,  423,  423,  423,
      423,  423,  423,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int markdown_flex_debug;
int markdown_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *markdowntext;
#line 1 "markdown.grammar"
#line 1076 "lex.markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int markdownlex_destroy (void );

int markdownget_debug (void );

void markdownset_debug (int debug_flag  );

YY_EXTRA_TYPE markdownget_extra (void );

void markdownset_extra (YY_EXTRA_TYPE user_defined  );

FILE *markdownget_in (void );

void markdownset_in  (FILE * in_str  );

FILE *markdownget_out (void );

void markdownset_out  (FILE * out_str  );

yy_size_t markdownget_leng (void );

char *markdownget_text (void );

int markdownget_lineno (void );

void markdownset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int markdownwrap (void );
#else
extern int markdownwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( markdowntext, markdownleng, 1, markdownout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( markdownin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( markdownin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, markdownin))==0 && ferror(markdownin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(markdownin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int markdownlex (void);

#define YY_DECL int markdownlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after markdowntext and markdownleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( markdownleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(markdowntext[markdownleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 34 "markdown.grammar"


#line 1262 "lex.markdown.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! markdownin )
			markdownin = stdin;

		if ( ! markdownout )
			markdownout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			markdownensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				markdown_create_buffer(markdownin,YY_BUF_SIZE );
		}

		markdown_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of markdowntext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 375 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2124 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 36 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNEM);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 37 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNSTRONG);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 38 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNSTRONGEM);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 39 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNHEADER);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 40 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNMULTILINEHEADER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 41 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNURL);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 42 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNHREF);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 43 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNBULLETSTART);}
	YY_BREAK
case 9:
*yy_cp = (yy_hold_char); /* undo effects of setting up markdowntext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up markdowntext again */
YY_RULE_SETUP
#line 45 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNNEWLINE);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 46 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNPARAGRAPH);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 47 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNUNKNOWN);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 48 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNUNKNOWN);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 50 "markdown.grammar"
ECHO;
	YY_BREAK
#line 1421 "lex.markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed markdownin at a new source and called
			 * markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = markdownin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( markdownwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * markdowntext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			markdownrestart(markdownin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 375 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 375 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 374);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					markdownrestart(markdownin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( markdownwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve markdowntext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void markdownrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        markdownensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            markdown_create_buffer(markdownin,YY_BUF_SIZE );
	}

	markdown_init_buffer(YY_CURRENT_BUFFER,input_file );
	markdown_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		markdownpop_buffer_state();
	 *		markdownpush_buffer_state(new_buffer);
     */
	markdownensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	markdown_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (markdownwrap()) processing, but the only time this flag
	 * is looked at is after markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void markdown_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	markdownin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE markdown_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) markdownalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	markdown_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with markdown_create_buffer()
 * 
 */
    void markdown_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		markdownfree((void *) b->yy_ch_buf  );

	markdownfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a markdownrestart() or at EOF.
 */
    static void markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	markdown_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then markdown_init_buffer was _probably_
     * called from markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void markdown_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		markdown_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	markdownensure_buffer_stack();

	/* This block is copied from markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from markdown_switch_to_buffer. */
	markdown_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void markdownpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	markdown_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		markdown_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void markdownensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)markdownrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE markdown_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	markdown_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE markdown_scan_string (yyconst char * yystr )
{
    
	return markdown_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) markdownalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = markdown_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up markdowntext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		markdowntext[markdownleng] = (yy_hold_char); \
		(yy_c_buf_p) = markdowntext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		markdownleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int markdownget_lineno  (void)
{
        
    return markdownlineno;
}

/** Get the input stream.
 * 
 */
FILE *markdownget_in  (void)
{
        return markdownin;
}

/** Get the output stream.
 * 
 */
FILE *markdownget_out  (void)
{
        return markdownout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t markdownget_leng  (void)
{
        return markdownleng;
}

/** Get the current token.
 * 
 */

char *markdownget_text  (void)
{
        return markdowntext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void markdownset_lineno (int  line_number )
{
    
    markdownlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see markdown_switch_to_buffer
 */
void markdownset_in (FILE *  in_str )
{
        markdownin = in_str ;
}

void markdownset_out (FILE *  out_str )
{
        markdownout = out_str ;
}

int markdownget_debug  (void)
{
        return markdown_flex_debug;
}

void markdownset_debug (int  bdebug )
{
        markdown_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from markdownlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    markdownin = stdin;
    markdownout = stdout;
#else
    markdownin = (FILE *) 0;
    markdownout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * markdownlex_init()
     */
    return 0;
}

/* markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int markdownlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		markdown_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		markdownpop_buffer_state();
	}

	/* Destroy the stack itself. */
	markdownfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * markdownlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *markdownalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *markdownrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void markdownfree (void * ptr )
{
	free( (char *) ptr );	/* see markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 50 "markdown.grammar"



int markdownwrap(void){return 1;}


