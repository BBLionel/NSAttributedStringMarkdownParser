//
// Copyright 2012 Jeff Verkoeyen
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "MarkdownTokens.h"

#line 3 "lex.markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer markdown_create_buffer
#define yy_delete_buffer markdown_delete_buffer
#define yy_flex_debug markdown_flex_debug
#define yy_init_buffer markdown_init_buffer
#define yy_flush_buffer markdown_flush_buffer
#define yy_load_buffer_state markdown_load_buffer_state
#define yy_switch_to_buffer markdown_switch_to_buffer
#define yyin markdownin
#define yyleng markdownleng
#define yylex markdownlex
#define yylineno markdownlineno
#define yyout markdownout
#define yyrestart markdownrestart
#define yytext markdowntext
#define yywrap markdownwrap
#define yyalloc markdownalloc
#define yyrealloc markdownrealloc
#define yyfree markdownfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE markdownrestart(markdownin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t markdownleng;

extern FILE *markdownin, *markdownout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up markdowntext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up markdowntext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via markdownrestart()), so that the user can continue scanning by
	 * just pointing markdownin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when markdowntext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t markdownleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow markdownwrap()'s to do buffer switches
 * instead of setting up a fresh markdownin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void markdownrestart (FILE *input_file  );
void markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE markdown_create_buffer (FILE *file,int size  );
void markdown_delete_buffer (YY_BUFFER_STATE b  );
void markdown_flush_buffer (YY_BUFFER_STATE b  );
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void markdownpop_buffer_state (void );

static void markdownensure_buffer_stack (void );
static void markdown_load_buffer_state (void );
static void markdown_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER markdown_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE markdown_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE markdown_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE markdown_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *markdownalloc (yy_size_t  );
void *markdownrealloc (void *,yy_size_t  );
void markdownfree (void *  );

#define yy_new_buffer markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        markdownensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(markdownin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        markdownensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(markdownin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *markdownin = (FILE *) 0, *markdownout = (FILE *) 0;

typedef int yy_state_type;

extern int markdownlineno;

int markdownlineno = 1;

extern char *markdowntext;
#define yytext_ptr markdowntext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up markdowntext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	markdownleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 13
#define YY_END_OF_BUFFER 14
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[363] =
    {   0,
        0,    0,   14,   12,   11,   10,   11,   12,   12,   12,
       12,   12,   12,   12,    4,    0,    0,    9,    8,    0,
        0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    4,    4,    5,    9,    8,    1,    0,
        1,    5,    0,    0,    0,    0,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    5,    0,    0,    0,
        4,    0,    0,    0,    5,    0,    0,    2,    6,    0,
        6,    6,    0,    6,    6,    0,    0,    0,    0,    0,
        0,    5,    0,    0,    0,    0,    0,    0,    5,    0,
        0,    0,    2,    4,    2,    2,    0,    0,    0,    5,

        0,    6,    0,    6,    6,    6,    0,    6,    6,    6,
        6,    0,    0,    0,    0,    0,    6,    0,    0,    0,
        0,    0,    0,    5,    0,    0,    4,    0,    3,    6,
        6,    6,    6,    6,    6,    6,    6,    5,    6,    6,
        0,    6,    6,    0,    0,    0,    7,    6,    6,    0,
        0,    0,    4,    3,    6,    6,    5,    6,    0,    6,
        6,    6,    6,    6,    0,    6,    6,    6,    6,    6,
        0,    6,    6,    6,    6,    6,    0,    0,    6,    6,
        6,    6,    5,    6,    6,    6,    6,    6,    6,    6,
        0,    6,    5,    6,    6,    6,    6,    6,    6,    0,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    0,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    5,    6,    6,    6,    6,
        6,    0,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    5,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    5,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    5,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    6,    7,    6,    6,    6,    6,    8,
        9,   10,    6,    6,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    6,    6,
       16,    6,    6,    6,   14,   14,   14,   14,   14,   17,
       18,   19,   18,   18,   18,   18,   18,   18,   18,   20,
       18,   18,   21,   22,   18,   18,   18,   18,   18,   18,
       23,   24,   25,    6,   26,    6,   14,   14,   14,   14,

       14,   27,   18,   28,   18,   18,   18,   18,   18,   18,
       18,   29,   18,   18,   30,   31,   18,   18,   18,   18,
       18,   18,    6,    6,    6,    6,    1,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32
    } ;

static yyconst flex_int32_t yy_meta[33] =
    {   0,
        1,    1,    1,    1,    2,    3,    3,    3,    3,    3,
        4,    5,    6,    4,    3,    7,    4,    4,    4,    4,
        4,    4,    3,    4,    3,    3,    4,    4,    4,    4,
        4,    4
    } ;

static yyconst flex_int16_t yy_base[412] =
    {   0,
        0,  651,  596,  573,  571,  565,   30,   31,   41,   52,
       53,  547,   84,   73,   33,  545,   66,  543,   34,   86,
       81,   90,  532,  101,  133,   97,   83,   77,    0,  159,
       78,  127,  113,  523,   87,   92,  522,  137,  508,  491,
     2123,  135,  138,  155,  146,  176,  198,  230,  483,  256,
      162,  155,  177,  224,  141,  459,  143,  175,  226,  188,
      103,  169,  473,  465,  235,  178,  239,  179,  273,  305,
      459,  322,  354,    0,  380,  251,  196,  240,  112,  259,
      196,    0,  434,  141,  252,  296,  238,  418,  270,  407,
      251,  300,  262,  269,  429, 2123,  311,  415,  408,  314,

      317,    0,  407,    0,  433,    0,  460,  390,  486,  503,
      301,  371,  320,  332,  361,  363,  349,  360,  301,  526,
      362,  364,  352,  380,  337,  366,  275,  350,  335,    0,
      552,  388,  386,    0,  578,  403,  403,  411,  335,  319,
      412,  414,  427,  428,  432,  605,  445,    0,  636,  439,
      451,  303,  296, 2123,  456,  459,    0,  364,  465,  467,
      486,  479,  490,  392,  491,  286,  662,  495,  382,  688,
      506,  705,  441,  727,  759,  507,  518,  522,  524,  536,
      785,  544,    0,  545,  546,  554,  811,  550,  561,  570,
      572,    0,  574,  244,  828,  860,    0,  886,  577,  628,

      629,  630,  634,  635,  654,  655,  656,  661,  670,  903,
      925,  957,  227,  983, 1010,  681,  686,  693,  704,  726,
      751,  752,  753,  757,  758,  777, 1032, 1064,  226, 1081,
     1113,    0, 1139,  212,  778,  158, 1156,  785, 1188,  792,
      793, 1214,  794,  809,  816,  817,  852,  853,    0, 1230,
        0, 1256,    0, 1283,  132, 1309, 1336,  854, 1358,  858,
      582, 1390,  881, 1416,  859,  598,  881,  882,  888, 1442,
        0, 1457, 1484,  902,    0, 1515,   95,  923,   67, 1542,
      895, 1574,  949,  643, 1601,  950,  669, 1627,  951,  955,
      956,  975,    0,  976,    0,  685, 1654,  977,  695,  982,

     1031,    0, 1681, 1059, 1707, 1059,  698, 1733, 1060, 1066,
     1080, 1105, 1106,  701, 1759, 1107,  766, 1111, 1112,    0,
     1785, 1131, 1132, 1133, 1137, 1138, 1154, 1155, 1180, 1181,
     1182, 1186, 1187, 1209, 1210, 1224, 1225, 1226, 1248, 1249,
     1250, 1254, 1255, 1275, 1276, 1277, 1281, 1282, 1301, 1302,
     1303, 1308, 1356, 1357, 1382, 1383, 1384, 1388, 1389, 1408,
     1409, 2123, 1812, 1819, 1826, 1833, 1840, 1847, 1854, 1861,
     1868, 1875, 1882, 1889, 1896, 1903, 1907, 1914, 1921, 1928,
     1935, 1942, 1949,   74, 1955, 1962, 1969, 1976, 1980,   34,
     1986, 1990, 1994, 1999, 2005, 2011, 2017, 2024, 2031, 2038,

     2045, 2052, 2059, 2066, 2073, 2080, 2087, 2094, 2101, 2108,
     2115
    } ;

static yyconst flex_int16_t yy_def[412] =
    {   0,
      362,    1,  362,  363,  363,  362,  363,  364,  362,    9,
        9,  365,  366,  367,  368,  363,  362,  362,  363,  364,
      369,  370,    9,    9,  371,    9,    9,  365,    9,    9,
      367,  372,  373,  368,  368,  362,  362,  363,  363,  369,
      362,  369,  370,  374,  375,   24,    9,  376,    9,    9,
        9,    9,  365,  377,   30,  372,  372,  373,  378,  379,
      368,  363,  374,  362,  374,  375,  380,  363,   47,  381,
       47,   69,  382,   47,   47,  377,   50,  363,    9,    9,
      383,   76,  384,   76,  385,   30,  363,  378,  378,  362,
      379,  386,  363,  368,  363,  362,  363,  380,  362,  380,

      363,   69,  387,   69,   69,   72,  388,   47,   47,  389,
       75,  390,   50,  363,  383,  383,  389,  391,   76,   76,
       30,  363,  386,  386,  362,  363,  368,  362,  363,   69,
       69,  392,  105,   72,   72,  117,  109,  117,  393,  117,
      394,   75,  392,  395,   50,  362,  383,  117,  117,  120,
       30,  362,  368,  362,  392,  131,  155,  155,  396,  105,
      393,  135,  109,  393,  397,  117,  117,   75,  155,  155,
       50,  146,  398,  146,  399,  149,  120,   30,  131,  155,
      170,  105,  161,  135,  109,  161,  161,  167,   75,  170,
       50,  398,  398,  174,  146,  400,  174,  174,  149,  120,

      131,  181,  105,  135,  109,  187,  167,   75,  170,  146,
      174,  401,  174,  174,  362,  198,  149,  120,  131,  181,
      105,  135,  109,  187,  167,  170,  211,  402,  211,  227,
      403,  211,  211,  215,  214,  215,  398,  215,  404,  198,
      149,   76,  131,  181,  135,  187,  167,  170,  227,  405,
      227,  227,  230,  406,  211,  211,  362,  233,  398,  214,
      257,  407,  215,  215,  198,  117,  181,  187,  167,  155,
      227,  227,  362,  252,  230,  230,  257,  256,  257,  362,
      257,  408,  233,  273,  409,  214,  257,  257,  264,  198,
      181,  187,  273,  272,  273,  273,  410,  252,  280,  276,

      256,  280,  411,  257,  288,  233,  273,  273,  214,  288,
      264,  198,  272,  273,  308,  252,  280,  276,  256,  280,
      280,  305,  233,  308,  214,  288,  264,  272,  315,  252,
      276,  256,  321,  305,  233,  308,  288,  264,  272,  315,
      252,  276,  256,  321,  305,  308,  288,  264,  272,  315,
      276,  321,  305,  308,  288,  315,  321,  305,  308,  315,
      321,    0,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362
    } ;

static yyconst flex_int16_t yy_nxt[2156] =
    {   0,
        4,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        9,    4,    4,    9,    4,    4,   10,    9,   11,    9,
        9,    9,   12,   13,    4,   14,   10,   11,    9,    9,
        9,    9,   17,   21,   19,   17,   17,  143,   38,   35,
       22,   16,   16,   17,   16,   16,   16,   16,   16,   16,
       16,   23,   24,   16,   23,   16,   16,   23,   23,   23,
       23,   23,   23,   16,   25,   16,   16,   23,   23,   23,
       23,   23,   23,   26,   27,   32,   36,  117,  259,   17,
       32,   36,   26,   27,   16,   16,   17,   16,   21,   17,
       41,   42,   44,   61,   46,   39,   42,   30,   33,   45,

       30,   53,   36,   39,   52,   17,  259,   36,   46,   94,
       30,   47,   16,   52,   47,   59,   51,   47,   47,   47,
       47,   47,   47,   46,   48,   51,   78,   47,   47,   47,
       47,   47,   47,   16,   16,   17,   16,   57,   60,   17,
       44,   38,   57,  210,   41,   42,   50,   62,   67,   50,
       42,   84,   41,   57,   86,   68,  362,   86,   57,   50,
       29,   54,   29,   29,   64,   65,   46,   86,   41,  259,
       65,   17,   55,   46,   80,   55,   78,   59,   95,   17,
       67,   17,   79,   80,   81,   55,   69,   97,  101,   69,
       92,   79,   69,   69,   69,   69,   69,   69,   17,   70,

       87,   53,   69,   69,   69,   69,   69,   69,   71,  113,
       72,   71,  113,   93,   71,   71,   71,   71,   71,   71,
      116,   73,  113,  259,   71,   71,   71,   71,   71,   71,
       16,   16,   17,   16,   82,   83,   89,  210,  210,   36,
       17,   89,   17,   75,   64,   65,   75,   85,   99,  100,
       65,   90,  114,   92,  100,  210,   75,   49,   76,   49,
       49,   82,  112,   95,   17,  120,   36,   46,  120,   77,
       46,   17,   77,   78,   85,  127,  122,   17,  120,   79,
       89,  153,   77,  102,   16,   89,  102,  126,   79,  102,
      102,  102,  102,  102,  102,   90,  103,  112,   17,  102,

      102,  102,  102,  102,  102,   16,   16,   17,   16,  121,
      124,   84,  121,   17,  142,  124,  362,  142,  105,   17,
      101,  105,  121,   99,  100,  125,  129,  142,  154,  100,
      112,  105,  106,  145,   17,  106,  145,   17,  106,  106,
      106,  106,  106,  106,  146,  107,  145,  139,  106,  106,
      106,  106,  106,  106,   16,   16,   17,   16,  165,  154,
       83,  139,  152,   17,  362,   17,   17,  109,   17,  147,
      109,  147,  141,  149,  158,  151,  149,  125,  151,  362,
      109,   74,  110,   74,   74,  116,  149,  116,  151,  126,
      124,  129,  158,  111,  144,  124,  111,  362,  157,  160,

      139,   46,  160,   36,  139,  125,  111,   16,   16,   17,
       16,  159,  160,  138,  112,  165,  163,  128,   36,  163,
      131,  138,  112,  131,   99,  167,   36,  168,  167,  163,
      168,   17,   96,  131,  104,  132,  104,  104,  167,  139,
      168,  170,  362,   90,  170,  171,  133,   17,  171,  133,
      159,  193,  177,  147,  170,  177,  193,  118,  171,  133,
       16,   16,   17,   16,  178,  177,  157,  178,  139,  116,
       46,   36,  179,  135,   96,  179,  135,  178,  181,  159,
      182,  181,   64,  182,   41,  179,  135,  108,  136,  108,
      108,  181,  184,  182,   46,  184,  183,   46,  139,  137,

       41,   36,  137,  185,  187,  184,  185,  187,  189,  165,
       17,  189,  137,  138,   83,  139,  185,  187,   36,  191,
      199,  189,  191,  199,   37,   17,  141,  119,  119,  119,
      119,  200,  191,  199,  200,   23,   84,  201,   23,  150,
      201,  362,  150,   46,  200,   37,  158,   17,   23,   17,
      201,  362,  150,  130,  155,  130,  130,  203,  204,  205,
      203,  204,  205,  207,  164,  156,  207,   18,  156,  362,
      203,  204,  205,   17,  208,   17,  207,  208,  156,  134,
      161,  134,  134,  209,  193,   23,  209,  208,   23,  193,
      217,  162,  281,  217,  162,  362,  209,  192,   23,  148,

      148,  148,  148,  217,  162,  172,  172,  173,  172,   16,
      172,  172,  172,  172,  172,  174,  172,  172,  174,  172,
      172,  174,  174,  174,  174,  174,  174,  172,  175,  172,
      172,  174,  174,  174,  174,  174,  174,  148,  148,  148,
      148,  218,  219,  220,  218,  219,  220,  221,  222,  176,
      221,  222,  176,  296,  218,  219,  220,   15,  192,  362,
      221,  222,  176,  166,  166,  166,  166,  223,  224,  225,
      223,  224,  225,  112,   71,  188,  362,   71,  188,  281,
      223,  224,  225,  226,  192,  362,  226,   71,  188,  169,
      169,  169,  169,  362,  240,  296,  226,  240,  158,  241,

      192,  190,  241,  362,  190,  317,  242,  240,  296,  242,
      193,  296,  241,  192,  190,  172,  192,  243,  172,  242,
      243,  172,  172,  172,  172,  172,  172,  362,  172,  362,
      243,  172,  172,  172,  172,  172,  172,  194,  195,  244,
      194,  362,  244,  194,  194,  194,  194,  194,  194,  362,
      196,  362,  244,  194,  194,  194,  194,  194,  194,  172,
      172,  173,  172,   29,  102,  245,   71,  102,  245,   71,
      246,  247,  198,  246,  247,  198,  317,  102,  245,   71,
      362,  193,  362,  246,  247,  198,  180,  180,  180,  180,
      248,  260,  362,  248,  260,  238,  259,  362,  202,  362,

      192,  202,  362,  248,  260,  265,  266,  102,  265,  266,
      102,  202,  186,  186,  186,  186,  362,  362,  265,  266,
      102,  164,  267,  362,  206,  267,  362,  206,  362,  106,
      268,  362,  106,  268,  362,  267,  362,  206,  211,  362,
      362,  211,  106,  268,  211,  211,  211,  211,  211,  211,
      362,  212,  362,  362,  211,  211,  211,  211,  211,  211,
      172,  172,  173,  172,   49,  269,  270,  283,  269,  270,
      283,  286,  290,  214,  286,  290,  214,  362,  269,  270,
      283,  362,  362,  362,  286,  290,  214,  197,  215,  197,
       29,  238,  259,  362,  291,  292,  192,  291,  292,  216,

      362,  140,  216,  362,  140,  281,  259,  291,  292,  362,
      192,  362,  216,  227,  140,  298,  227,  362,  298,  227,
      227,  227,  227,  227,  227,  362,  228,  362,  298,  227,
      227,  227,  227,  227,  227,  229,  301,  230,  229,  301,
      362,  229,  229,  229,  229,  229,  229,  362,  231,  301,
      362,  229,  229,  229,  229,  229,  229,  172,  172,  173,
      172,   74,  306,  309,  311,  306,  309,  311,  312,  158,
      233,  312,  158,  233,  362,  306,  309,  311,  362,  362,
      362,  312,  158,  233,  213,  234,  213,   49,  164,  313,
      316,  164,  313,  316,  210,  318,  235,  362,  318,  235,

      362,  164,  313,  316,  362,  362,  362,  362,  318,  235,
      192,  192,  192,  192,  362,  192,  192,  192,  192,  192,
      236,  237,  192,  238,  192,  193,  238,  238,  238,  238,
      238,  238,  192,  239,  192,  192,  238,  238,  238,  238,
      238,  238,  249,  172,  319,  249,  362,  319,  249,  249,
      249,  249,  249,  249,  362,  250,  362,  319,  249,  249,
      249,  249,  249,  249,  172,  172,  173,  172,  104,  281,
      259,  362,  323,  325,  192,  323,  325,  252,  362,  326,
      252,  362,  326,  362,  362,  323,  325,  362,  362,  362,
      252,  253,  326,  327,  253,  362,  327,  253,  253,  253,

      253,  253,  253,  362,  254,  362,  327,  253,  253,  253,
      253,  253,  253,  172,  172,  173,  172,  108,  194,  328,
      330,  194,  328,  330,  331,  332,  256,  331,  332,  256,
      362,  194,  328,  330,  362,  362,  362,  331,  332,  256,
      232,  257,  232,   74,  334,  335,  336,  334,  335,  336,
      194,  337,  258,  194,  337,  258,  362,  334,  335,  336,
      362,  362,  362,  194,  337,  258,  261,  338,  339,  261,
      338,  339,  261,  261,  261,  261,  261,  261,  362,  262,
      338,  339,  261,  261,  261,  261,  261,  261,  192,  192,
      192,  192,  119,  340,  341,  342,  340,  341,  342,  343,

      344,  264,  343,  344,  264,  362,  340,  341,  342,  362,
      362,  362,  343,  344,  264,  119,  119,  119,  119,  362,
      362,  362,  345,  229,   84,  345,  229,  362,  362,  362,
      172,  172,  173,  172,  130,  345,  229,  346,  347,  348,
      346,  347,  348,  272,  362,  362,  272,  362,  362,  362,
      346,  347,  348,  362,  362,  362,  272,  251,  273,  251,
      104,  349,  350,  249,  349,  350,  249,  351,  229,  274,
      351,  229,  274,  362,  349,  350,  249,  362,  362,  362,
      351,  229,  274,  172,  172,  173,  172,  134,  352,  353,
      354,  352,  353,  354,  355,  238,  276,  355,  238,  276,

      362,  352,  353,  354,  362,  362,  362,  355,  238,  276,
      255,  277,  255,  108,  249,  356,  253,  249,  356,  253,
      210,  357,  278,  362,  357,  278,  362,  249,  356,  253,
      362,  362,  362,  362,  357,  278,  192,  192,  192,  192,
      362,  192,  192,  192,  192,  192,  279,  237,  280,  281,
      192,  193,  281,  281,  281,  281,  281,  281,  192,  282,
      192,  192,  281,  281,  281,  281,  281,  281,  284,  358,
      359,  284,  358,  359,  284,  284,  284,  284,  284,  284,
      362,  285,  358,  359,  284,  284,  284,  284,  284,  284,
      192,  192,  192,  192,  148,  281,  360,  361,  281,  360,

      361,  281,  296,  288,  281,  296,  288,  362,  281,  360,
      361,  362,  362,  362,  281,  296,  288,  263,  263,  263,
      119,  296,  302,  362,  296,  302,  238,  259,  362,  289,
      362,  192,  289,  362,  296,  302,  362,  362,  362,  362,
      362,  362,  289,  169,  169,  169,  169,  362,  362,  362,
      362,  362,  158,  362,  362,  362,  362,  362,  271,  293,
      271,  130,  362,  362,  362,  362,  362,  362,  362,  362,
      294,  362,  362,  294,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  294,  192,  192,  192,  192,  362,  192,
      192,  192,  192,  192,  295,  192,  280,  296,  192,  193,

      296,  296,  296,  296,  296,  296,  192,  297,  192,  192,
      296,  296,  296,  296,  296,  296,  275,  299,  275,  134,
      362,  362,  362,  362,  362,  362,  362,  362,  300,  362,
      362,  300,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  300,  192,  192,  192,  192,  362,  192,  192,  192,
      192,  192,  302,  192,  280,  302,  192,  192,  302,  302,
      302,  302,  302,  302,  192,  303,  192,  192,  302,  302,
      302,  302,  302,  302,  192,  192,  192,  192,  166,  362,
      362,  362,  362,  362,  362,  362,  362,  305,  362,  362,
      305,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      305,  192,  192,  192,  192,  169,  362,  362,  362,  362,
      362,  362,  362,  362,  308,  362,  362,  308,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  308,  287,  287,
      287,  148,  362,  362,  362,  362,  362,  281,  362,  362,
      310,  362,  192,  310,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  310,  192,  192,  192,  192,  180,  362,
      362,  362,  362,  362,  362,  362,  362,  315,  362,  362,
      315,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      315,  192,  192,  192,  192,  186,  362,  362,  362,  362,
      362,  362,  362,  362,  321,  362,  362,  321,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  321,  304,  304,
      304,  166,  362,  362,  362,  362,  362,  362,  259,  362,
      322,  362,  362,  322,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  322,  307,  307,  307,  169,  362,  362,
      362,  362,  362,  296,  362,  362,  324,  362,  192,  324,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  324,
      314,  314,  314,  180,  362,  362,  362,  362,  362,  362,
      362,  362,  329,  362,  362,  329,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  329,  320,  320,  320,  186,
      362,  362,  362,  362,  362,  362,  362,  362,  333,  362,

      362,  333,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  333,   16,   16,   16,   16,   16,   16,   16,   20,
       20,   20,   20,   20,   20,   20,   28,   28,   28,   28,
       28,   28,   28,   29,   29,   29,   29,   29,   29,   29,
       31,   31,   31,   31,   31,   31,   31,   34,   34,   34,
       34,   34,   34,   34,   40,   40,   40,   40,   40,   40,
       40,   43,   43,   43,   43,   43,   43,   43,   49,   49,
       49,   49,   49,   49,   49,   56,   56,   56,   56,   56,
       56,   56,   58,   58,   58,   58,   58,   58,   58,   63,
       63,   63,   63,   63,   63,   63,   66,   66,   66,   66,

       66,   66,   66,   74,   74,   74,   74,   74,   74,   74,
       84,   84,  362,   84,   88,   88,   88,   88,   88,   88,
       88,   91,   91,   91,   91,   91,   91,   91,   98,   98,
       98,   98,   98,   98,   98,  104,  104,  104,  104,  104,
      104,  104,  108,  108,  108,  108,  108,  108,  108,  115,
      115,  115,  115,  115,  115,  115,  119,  119,  119,  119,
      119,  119,  123,  123,  123,  123,  123,  123,  123,  130,
      130,  130,  130,  130,  130,  130,  134,  134,  134,  134,
      134,  134,  134,  140,  140,  140,  140,  148,  148,  148,
      148,  148,  148,  158,  362,  158,  158,  164,  362,  164,

      166,  166,  166,  166,  166,  166,  169,  169,  169,  169,
      169,  169,  180,  180,  180,  180,  180,  180,  186,  186,
      186,  186,  186,  186,  192,  362,  192,  192,  192,  192,
      192,  197,  197,  197,  197,  197,  197,  197,  213,  213,
      213,  213,  213,  213,  213,  232,  232,  232,  232,  232,
      232,  232,  251,  251,  251,  251,  251,  251,  251,  255,
      255,  255,  255,  255,  255,  255,  263,  263,  263,  263,
      263,  263,  263,  271,  271,  271,  271,  271,  271,  271,
      275,  275,  275,  275,  275,  275,  275,  287,  287,  287,
      287,  287,  287,  287,  304,  304,  304,  304,  304,  304,

      304,  307,  307,  307,  307,  307,  307,  307,  314,  314,
      314,  314,  314,  314,  314,  320,  320,  320,  320,  320,
      320,  320,    3,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362
    } ;

static yyconst flex_int16_t yy_chk[2156] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    7,    8,    7,   15,   19,  390,   19,   15,
        8,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,   11,   14,   17,  384,  279,   28,
       31,   17,   10,   11,   13,   13,   13,   13,   20,   35,
       21,   21,   22,   35,   27,   20,   21,   13,   14,   22,

       13,   28,   36,   31,   27,   61,  277,   36,   26,   61,
       13,   24,   24,   27,   24,   33,   26,   24,   24,   24,
       24,   24,   24,   79,   24,   26,   79,   24,   24,   24,
       24,   24,   24,   25,   25,   25,   25,   32,   33,   38,
       43,   38,   32,  255,   42,   42,   25,   43,   45,   25,
       42,   84,   32,   57,   55,   45,   84,   55,   57,   25,
       30,   30,   30,   30,   44,   44,   52,   55,   57,  236,
       44,   62,   30,   51,   52,   30,   51,   58,   62,   53,
       66,   68,   51,   52,   53,   30,   46,   66,   68,   46,
       60,   51,   46,   46,   46,   46,   46,   46,   81,   46,

       58,   53,   46,   46,   46,   46,   46,   46,   47,   77,
       47,   47,   77,   60,   47,   47,   47,   47,   47,   47,
       81,   47,   77,  234,   47,   47,   47,   47,   47,   47,
       48,   48,   48,   48,   54,   54,   59,  229,  213,   54,
       87,   59,   78,   48,   65,   65,   48,   54,   67,   67,
       65,   59,   78,   91,   67,  194,   48,   50,   50,   50,
       50,   76,   76,   87,   93,   85,   76,   50,   85,   50,
       80,   94,   50,   80,   76,   94,   91,  127,   85,   80,
       89,  127,   50,   69,   69,   89,   69,   93,   80,   69,
       69,   69,   69,   69,   69,   89,   69,  166,  153,   69,

       69,   69,   69,   69,   69,   70,   70,   70,   70,   86,
       92,  119,   86,   97,  111,   92,  119,  111,   70,  101,
       97,   70,   86,  100,  100,   92,  101,  111,  152,  100,
      140,   70,   72,  113,  114,   72,  113,  129,   72,   72,
       72,   72,   72,   72,  114,   72,  113,  139,   72,   72,
       72,   72,   72,   72,   73,   73,   73,   73,  139,  128,
      117,  117,  125,  115,  117,  116,  122,   73,  126,  115,
       73,  116,  117,  118,  158,  121,  118,  123,  121,  158,
       73,   75,   75,   75,   75,  115,  118,  116,  121,  122,
      124,  126,  169,   75,  112,  124,   75,  169,  132,  133,

      132,  108,  133,  132,  164,  124,   75,  103,  103,  103,
      103,  132,  133,  136,  136,  164,  137,   99,  136,  137,
      103,  138,  138,  103,   98,  141,  138,  142,  141,  137,
      142,   95,   90,  103,  105,  105,  105,  105,  141,  143,
      142,  144,  143,   88,  144,  145,  105,  147,  145,  105,
      143,  173,  150,  147,  144,  150,  173,   83,  145,  105,
      107,  107,  107,  107,  151,  150,  155,  151,  155,  147,
       71,  155,  156,  107,   64,  156,  107,  151,  159,  155,
      160,  159,   63,  160,   56,  156,  107,  109,  109,  109,
      109,  159,  162,  160,   49,  162,  161,  109,  161,  109,

       40,  161,  109,  163,  165,  162,  163,  165,  168,  161,
       39,  168,  109,  110,  110,  110,  163,  165,  110,  171,
      176,  168,  171,  176,   37,   34,  110,  120,  120,  120,
      120,  177,  171,  176,  177,  178,  120,  179,  178,  120,
      179,  120,  120,   23,  177,   18,  180,   16,  178,   12,
      179,  180,  120,  131,  131,  131,  131,  182,  184,  185,
      182,  184,  185,  188,  186,  131,  188,    6,  131,  186,
      182,  184,  185,    5,  189,    4,  188,  189,  131,  135,
      135,  135,  135,  190,  193,  191,  190,  189,  191,  193,
      199,  135,  261,  199,  135,    3,  190,  261,  191,  266,

      266,  266,  266,  199,  135,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  149,  149,  149,
      149,  200,  201,  202,  200,  201,  202,  203,  204,  149,
      203,  204,  149,  284,  200,  201,  202,    2,  284,    0,
      203,  204,  149,  167,  167,  167,  167,  205,  206,  207,
      205,  206,  207,  167,  208,  167,    0,  208,  167,  287,
      205,  206,  207,  209,  287,    0,  209,  208,  167,  170,
      170,  170,  170,    0,  216,  296,  209,  216,  170,  217,

      296,  170,  217,  170,  170,  299,  218,  216,  307,  218,
      299,  314,  217,  307,  170,  172,  314,  219,  172,  218,
      219,  172,  172,  172,  172,  172,  172,    0,  172,    0,
      219,  172,  172,  172,  172,  172,  172,  174,  174,  220,
      174,    0,  220,  174,  174,  174,  174,  174,  174,    0,
      174,    0,  220,  174,  174,  174,  174,  174,  174,  175,
      175,  175,  175,  175,  221,  222,  223,  221,  222,  223,
      224,  225,  175,  224,  225,  175,  317,  221,  222,  223,
        0,  317,    0,  224,  225,  175,  181,  181,  181,  181,
      226,  235,    0,  226,  235,  238,  238,    0,  181,    0,

      238,  181,    0,  226,  235,  240,  241,  243,  240,  241,
      243,  181,  187,  187,  187,  187,    0,    0,  240,  241,
      243,  187,  244,    0,  187,  244,  187,  187,    0,  245,
      246,    0,  245,  246,    0,  244,    0,  187,  195,    0,
        0,  195,  245,  246,  195,  195,  195,  195,  195,  195,
        0,  195,    0,    0,  195,  195,  195,  195,  195,  195,
      196,  196,  196,  196,  196,  247,  248,  258,  247,  248,
      258,  260,  265,  196,  260,  265,  196,    0,  247,  248,
      258,    0,    0,    0,  260,  265,  196,  198,  198,  198,
      198,  263,  263,    0,  267,  268,  263,  267,  268,  198,

        0,  269,  198,    0,  269,  281,  281,  267,  268,    0,
      281,    0,  198,  210,  269,  274,  210,    0,  274,  210,
      210,  210,  210,  210,  210,    0,  210,    0,  274,  210,
      210,  210,  210,  210,  210,  211,  278,  211,  211,  278,
        0,  211,  211,  211,  211,  211,  211,    0,  211,  278,
        0,  211,  211,  211,  211,  211,  211,  212,  212,  212,
      212,  212,  283,  286,  289,  283,  286,  289,  290,  291,
      212,  290,  291,  212,    0,  283,  286,  289,    0,    0,
        0,  290,  291,  212,  214,  214,  214,  214,  292,  294,
      298,  292,  294,  298,  214,  300,  214,    0,  300,  214,

        0,  292,  294,  298,    0,    0,    0,    0,  300,  214,
      215,  215,  215,  215,    0,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  227,  227,  301,  227,    0,  301,  227,  227,
      227,  227,  227,  227,    0,  227,    0,  301,  227,  227,
      227,  227,  227,  227,  228,  228,  228,  228,  228,  304,
      304,    0,  306,  309,  304,  306,  309,  228,    0,  310,
      228,    0,  310,    0,    0,  306,  309,    0,    0,    0,
      228,  230,  310,  311,  230,    0,  311,  230,  230,  230,

      230,  230,  230,    0,  230,    0,  311,  230,  230,  230,
      230,  230,  230,  231,  231,  231,  231,  231,  312,  313,
      316,  312,  313,  316,  318,  319,  231,  318,  319,  231,
        0,  312,  313,  316,    0,    0,    0,  318,  319,  231,
      233,  233,  233,  233,  322,  323,  324,  322,  323,  324,
      325,  326,  233,  325,  326,  233,    0,  322,  323,  324,
        0,    0,    0,  325,  326,  233,  237,  327,  328,  237,
      327,  328,  237,  237,  237,  237,  237,  237,    0,  237,
      327,  328,  237,  237,  237,  237,  237,  237,  239,  239,
      239,  239,  239,  329,  330,  331,  329,  330,  331,  332,

      333,  239,  332,  333,  239,    0,  329,  330,  331,    0,
        0,    0,  332,  333,  239,  242,  242,  242,  242,    0,
        0,    0,  334,  335,  242,  334,  335,    0,    0,  242,
      250,  250,  250,  250,  250,  334,  335,  336,  337,  338,
      336,  337,  338,  250,    0,    0,  250,    0,    0,    0,
      336,  337,  338,    0,    0,    0,  250,  252,  252,  252,
      252,  339,  340,  341,  339,  340,  341,  342,  343,  252,
      342,  343,  252,    0,  339,  340,  341,    0,    0,    0,
      342,  343,  252,  254,  254,  254,  254,  254,  344,  345,
      346,  344,  345,  346,  347,  348,  254,  347,  348,  254,

        0,  344,  345,  346,    0,    0,    0,  347,  348,  254,
      256,  256,  256,  256,  349,  350,  351,  349,  350,  351,
      256,  352,  256,    0,  352,  256,    0,  349,  350,  351,
        0,    0,    0,    0,  352,  256,  257,  257,  257,  257,
        0,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  259,  353,
      354,  259,  353,  354,  259,  259,  259,  259,  259,  259,
        0,  259,  353,  354,  259,  259,  259,  259,  259,  259,
      262,  262,  262,  262,  262,  355,  356,  357,  355,  356,

      357,  358,  359,  262,  358,  359,  262,    0,  355,  356,
      357,    0,    0,    0,  358,  359,  262,  264,  264,  264,
      264,  360,  361,    0,  360,  361,  264,  264,    0,  264,
        0,  264,  264,    0,  360,  361,    0,    0,    0,    0,
        0,    0,  264,  270,  270,  270,  270,    0,    0,    0,
        0,    0,  270,    0,    0,    0,    0,  270,  272,  272,
      272,  272,    0,    0,    0,    0,    0,    0,    0,    0,
      272,    0,    0,  272,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  272,  273,  273,  273,  273,    0,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,

      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  276,  276,  276,  276,
        0,    0,    0,    0,    0,    0,    0,    0,  276,    0,
        0,  276,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  276,  280,  280,  280,  280,    0,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  282,  282,  282,  282,  282,    0,
        0,    0,    0,    0,    0,    0,    0,  282,    0,    0,
      282,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      282,  285,  285,  285,  285,  285,    0,    0,    0,    0,
        0,    0,    0,    0,  285,    0,    0,  285,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  285,  288,  288,
      288,  288,    0,    0,    0,    0,    0,  288,    0,    0,
      288,    0,  288,  288,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  288,  297,  297,  297,  297,  297,    0,
        0,    0,    0,    0,    0,    0,    0,  297,    0,    0,
      297,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      297,  303,  303,  303,  303,  303,    0,    0,    0,    0,
        0,    0,    0,    0,  303,    0,    0,  303,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  303,  305,  305,
      305,  305,    0,    0,    0,    0,    0,    0,  305,    0,
      305,    0,    0,  305,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  305,  308,  308,  308,  308,    0,    0,
        0,    0,    0,  308,    0,    0,  308,    0,  308,  308,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  308,
      315,  315,  315,  315,    0,    0,    0,    0,    0,    0,
        0,    0,  315,    0,    0,  315,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  315,  321,  321,  321,  321,
        0,    0,    0,    0,    0,    0,    0,    0,  321,    0,

        0,  321,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  321,  363,  363,  363,  363,  363,  363,  363,  364,
      364,  364,  364,  364,  364,  364,  365,  365,  365,  365,
      365,  365,  365,  366,  366,  366,  366,  366,  366,  366,
      367,  367,  367,  367,  367,  367,  367,  368,  368,  368,
      368,  368,  368,  368,  369,  369,  369,  369,  369,  369,
      369,  370,  370,  370,  370,  370,  370,  370,  371,  371,
      371,  371,  371,  371,  371,  372,  372,  372,  372,  372,
      372,  372,  373,  373,  373,  373,  373,  373,  373,  374,
      374,  374,  374,  374,  374,  374,  375,  375,  375,  375,

      375,  375,  375,  376,  376,  376,  376,  376,  376,  376,
      377,  377,    0,  377,  378,  378,  378,  378,  378,  378,
      378,  379,  379,  379,  379,  379,  379,  379,  380,  380,
      380,  380,  380,  380,  380,  381,  381,  381,  381,  381,
      381,  381,  382,  382,  382,  382,  382,  382,  382,  383,
      383,  383,  383,  383,  383,  383,  385,  385,  385,  385,
      385,  385,  386,  386,  386,  386,  386,  386,  386,  387,
      387,  387,  387,  387,  387,  387,  388,  388,  388,  388,
      388,  388,  388,  389,  389,  389,  389,  391,  391,  391,
      391,  391,  391,  392,    0,  392,  392,  393,    0,  393,

      394,  394,  394,  394,  394,  394,  395,  395,  395,  395,
      395,  395,  396,  396,  396,  396,  396,  396,  397,  397,
      397,  397,  397,  397,  398,    0,  398,  398,  398,  398,
      398,  399,  399,  399,  399,  399,  399,  399,  400,  400,
      400,  400,  400,  400,  400,  401,  401,  401,  401,  401,
      401,  401,  402,  402,  402,  402,  402,  402,  402,  403,
      403,  403,  403,  403,  403,  403,  404,  404,  404,  404,
      404,  404,  404,  405,  405,  405,  405,  405,  405,  405,
      406,  406,  406,  406,  406,  406,  406,  407,  407,  407,
      407,  407,  407,  407,  408,  408,  408,  408,  408,  408,

      408,  409,  409,  409,  409,  409,  409,  409,  410,  410,
      410,  410,  410,  410,  410,  411,  411,  411,  411,  411,
      411,  411,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int markdown_flex_debug;
int markdown_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *markdowntext;
#line 1 "markdown.grammar"
#line 1073 "lex.markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int markdownlex_destroy (void );

int markdownget_debug (void );

void markdownset_debug (int debug_flag  );

YY_EXTRA_TYPE markdownget_extra (void );

void markdownset_extra (YY_EXTRA_TYPE user_defined  );

FILE *markdownget_in (void );

void markdownset_in  (FILE * in_str  );

FILE *markdownget_out (void );

void markdownset_out  (FILE * out_str  );

yy_size_t markdownget_leng (void );

char *markdownget_text (void );

int markdownget_lineno (void );

void markdownset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int markdownwrap (void );
#else
extern int markdownwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( markdowntext, markdownleng, 1, markdownout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( markdownin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( markdownin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, markdownin))==0 && ferror(markdownin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(markdownin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int markdownlex (void);

#define YY_DECL int markdownlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after markdowntext and markdownleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( markdownleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(markdowntext[markdownleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 33 "markdown.grammar"


#line 1259 "lex.markdown.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! markdownin )
			markdownin = stdin;

		if ( ! markdownout )
			markdownout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			markdownensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				markdown_create_buffer(markdownin,YY_BUF_SIZE );
		}

		markdown_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of markdowntext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 363 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2123 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 35 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNEM);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 36 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNSTRONG);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 37 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNSTRONGEM);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 38 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNHEADER);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 39 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNMULTILINEHEADER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 40 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNURL);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNHREF);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 43 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNPARAGRAPH);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 44 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNPARAGRAPH);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 45 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNNEWLINE);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 46 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNUNKNOWN);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 47 "markdown.grammar"
{markdownConsume(markdowntext, MARKDOWNUNKNOWN);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 49 "markdown.grammar"
ECHO;
	YY_BREAK
#line 1415 "lex.markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed markdownin at a new source and called
			 * markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = markdownin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( markdownwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * markdowntext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			markdownrestart(markdownin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 363 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 363 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 362);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					markdownrestart(markdownin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( markdownwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve markdowntext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void markdownrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        markdownensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            markdown_create_buffer(markdownin,YY_BUF_SIZE );
	}

	markdown_init_buffer(YY_CURRENT_BUFFER,input_file );
	markdown_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		markdownpop_buffer_state();
	 *		markdownpush_buffer_state(new_buffer);
     */
	markdownensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	markdown_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (markdownwrap()) processing, but the only time this flag
	 * is looked at is after markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void markdown_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	markdownin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE markdown_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) markdownalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	markdown_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with markdown_create_buffer()
 * 
 */
    void markdown_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		markdownfree((void *) b->yy_ch_buf  );

	markdownfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a markdownrestart() or at EOF.
 */
    static void markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	markdown_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then markdown_init_buffer was _probably_
     * called from markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void markdown_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		markdown_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	markdownensure_buffer_stack();

	/* This block is copied from markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from markdown_switch_to_buffer. */
	markdown_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void markdownpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	markdown_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		markdown_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void markdownensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)markdownrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE markdown_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	markdown_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE markdown_scan_string (yyconst char * yystr )
{
    
	return markdown_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) markdownalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = markdown_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up markdowntext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		markdowntext[markdownleng] = (yy_hold_char); \
		(yy_c_buf_p) = markdowntext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		markdownleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int markdownget_lineno  (void)
{
        
    return markdownlineno;
}

/** Get the input stream.
 * 
 */
FILE *markdownget_in  (void)
{
        return markdownin;
}

/** Get the output stream.
 * 
 */
FILE *markdownget_out  (void)
{
        return markdownout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t markdownget_leng  (void)
{
        return markdownleng;
}

/** Get the current token.
 * 
 */

char *markdownget_text  (void)
{
        return markdowntext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void markdownset_lineno (int  line_number )
{
    
    markdownlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see markdown_switch_to_buffer
 */
void markdownset_in (FILE *  in_str )
{
        markdownin = in_str ;
}

void markdownset_out (FILE *  out_str )
{
        markdownout = out_str ;
}

int markdownget_debug  (void)
{
        return markdown_flex_debug;
}

void markdownset_debug (int  bdebug )
{
        markdown_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from markdownlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    markdownin = stdin;
    markdownout = stdout;
#else
    markdownin = (FILE *) 0;
    markdownout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * markdownlex_init()
     */
    return 0;
}

/* markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int markdownlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		markdown_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		markdownpop_buffer_state();
	}

	/* Destroy the stack itself. */
	markdownfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * markdownlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *markdownalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *markdownrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void markdownfree (void * ptr )
{
	free( (char *) ptr );	/* see markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 49 "markdown.grammar"



int markdownwrap(void){return 1;}


